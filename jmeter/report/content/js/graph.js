/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 2690.0, "series": [{"data": [[0.0, 3.0], [0.1, 6.0], [0.2, 8.0], [0.3, 12.0], [0.4, 13.0], [0.5, 13.0], [0.6, 14.0], [0.7, 14.0], [0.8, 15.0], [0.9, 15.0], [1.0, 16.0], [1.1, 16.0], [1.2, 16.0], [1.3, 17.0], [1.4, 17.0], [1.5, 17.0], [1.6, 18.0], [1.7, 18.0], [1.8, 18.0], [1.9, 18.0], [2.0, 19.0], [2.1, 20.0], [2.2, 21.0], [2.3, 21.0], [2.4, 22.0], [2.5, 23.0], [2.6, 25.0], [2.7, 28.0], [2.8, 29.0], [2.9, 36.0], [3.0, 37.0], [3.1, 38.0], [3.2, 38.0], [3.3, 39.0], [3.4, 39.0], [3.5, 39.0], [3.6, 39.0], [3.7, 40.0], [3.8, 40.0], [3.9, 40.0], [4.0, 41.0], [4.1, 41.0], [4.2, 41.0], [4.3, 42.0], [4.4, 42.0], [4.5, 43.0], [4.6, 43.0], [4.7, 44.0], [4.8, 44.0], [4.9, 44.0], [5.0, 45.0], [5.1, 45.0], [5.2, 45.0], [5.3, 46.0], [5.4, 46.0], [5.5, 47.0], [5.6, 47.0], [5.7, 47.0], [5.8, 47.0], [5.9, 48.0], [6.0, 48.0], [6.1, 49.0], [6.2, 49.0], [6.3, 49.0], [6.4, 50.0], [6.5, 50.0], [6.6, 51.0], [6.7, 51.0], [6.8, 51.0], [6.9, 52.0], [7.0, 53.0], [7.1, 53.0], [7.2, 54.0], [7.3, 54.0], [7.4, 54.0], [7.5, 55.0], [7.6, 55.0], [7.7, 56.0], [7.8, 56.0], [7.9, 56.0], [8.0, 57.0], [8.1, 57.0], [8.2, 58.0], [8.3, 58.0], [8.4, 58.0], [8.5, 58.0], [8.6, 58.0], [8.7, 59.0], [8.8, 59.0], [8.9, 60.0], [9.0, 60.0], [9.1, 61.0], [9.2, 61.0], [9.3, 61.0], [9.4, 62.0], [9.5, 62.0], [9.6, 63.0], [9.7, 63.0], [9.8, 63.0], [9.9, 63.0], [10.0, 64.0], [10.1, 64.0], [10.2, 64.0], [10.3, 65.0], [10.4, 65.0], [10.5, 66.0], [10.6, 66.0], [10.7, 66.0], [10.8, 67.0], [10.9, 67.0], [11.0, 68.0], [11.1, 68.0], [11.2, 69.0], [11.3, 69.0], [11.4, 69.0], [11.5, 70.0], [11.6, 70.0], [11.7, 70.0], [11.8, 71.0], [11.9, 71.0], [12.0, 72.0], [12.1, 72.0], [12.2, 72.0], [12.3, 73.0], [12.4, 73.0], [12.5, 73.0], [12.6, 73.0], [12.7, 74.0], [12.8, 74.0], [12.9, 74.0], [13.0, 75.0], [13.1, 75.0], [13.2, 76.0], [13.3, 77.0], [13.4, 77.0], [13.5, 78.0], [13.6, 78.0], [13.7, 78.0], [13.8, 79.0], [13.9, 80.0], [14.0, 80.0], [14.1, 81.0], [14.2, 82.0], [14.3, 83.0], [14.4, 83.0], [14.5, 84.0], [14.6, 84.0], [14.7, 84.0], [14.8, 85.0], [14.9, 85.0], [15.0, 85.0], [15.1, 86.0], [15.2, 86.0], [15.3, 87.0], [15.4, 87.0], [15.5, 87.0], [15.6, 88.0], [15.7, 88.0], [15.8, 90.0], [15.9, 90.0], [16.0, 92.0], [16.1, 93.0], [16.2, 94.0], [16.3, 94.0], [16.4, 94.0], [16.5, 95.0], [16.6, 95.0], [16.7, 96.0], [16.8, 97.0], [16.9, 97.0], [17.0, 97.0], [17.1, 98.0], [17.2, 98.0], [17.3, 99.0], [17.4, 99.0], [17.5, 100.0], [17.6, 101.0], [17.7, 102.0], [17.8, 102.0], [17.9, 103.0], [18.0, 103.0], [18.1, 105.0], [18.2, 105.0], [18.3, 106.0], [18.4, 107.0], [18.5, 108.0], [18.6, 109.0], [18.7, 111.0], [18.8, 112.0], [18.9, 112.0], [19.0, 116.0], [19.1, 123.0], [19.2, 126.0], [19.3, 129.0], [19.4, 129.0], [19.5, 130.0], [19.6, 131.0], [19.7, 133.0], [19.8, 134.0], [19.9, 135.0], [20.0, 136.0], [20.1, 137.0], [20.2, 137.0], [20.3, 138.0], [20.4, 138.0], [20.5, 138.0], [20.6, 138.0], [20.7, 139.0], [20.8, 139.0], [20.9, 139.0], [21.0, 139.0], [21.1, 140.0], [21.2, 140.0], [21.3, 141.0], [21.4, 143.0], [21.5, 144.0], [21.6, 149.0], [21.7, 151.0], [21.8, 153.0], [21.9, 153.0], [22.0, 155.0], [22.1, 156.0], [22.2, 157.0], [22.3, 158.0], [22.4, 163.0], [22.5, 166.0], [22.6, 167.0], [22.7, 168.0], [22.8, 169.0], [22.9, 170.0], [23.0, 170.0], [23.1, 171.0], [23.2, 172.0], [23.3, 172.0], [23.4, 173.0], [23.5, 174.0], [23.6, 175.0], [23.7, 176.0], [23.8, 176.0], [23.9, 177.0], [24.0, 179.0], [24.1, 180.0], [24.2, 181.0], [24.3, 182.0], [24.4, 183.0], [24.5, 184.0], [24.6, 185.0], [24.7, 186.0], [24.8, 187.0], [24.9, 187.0], [25.0, 188.0], [25.1, 190.0], [25.2, 192.0], [25.3, 193.0], [25.4, 194.0], [25.5, 195.0], [25.6, 197.0], [25.7, 199.0], [25.8, 202.0], [25.9, 206.0], [26.0, 209.0], [26.1, 211.0], [26.2, 212.0], [26.3, 214.0], [26.4, 216.0], [26.5, 217.0], [26.6, 218.0], [26.7, 219.0], [26.8, 220.0], [26.9, 237.0], [27.0, 239.0], [27.1, 240.0], [27.2, 242.0], [27.3, 257.0], [27.4, 258.0], [27.5, 258.0], [27.6, 259.0], [27.7, 259.0], [27.8, 259.0], [27.9, 259.0], [28.0, 260.0], [28.1, 276.0], [28.2, 276.0], [28.3, 278.0], [28.4, 290.0], [28.5, 294.0], [28.6, 296.0], [28.7, 297.0], [28.8, 298.0], [28.9, 299.0], [29.0, 299.0], [29.1, 305.0], [29.2, 309.0], [29.3, 311.0], [29.4, 314.0], [29.5, 317.0], [29.6, 368.0], [29.7, 369.0], [29.8, 369.0], [29.9, 379.0], [30.0, 387.0], [30.1, 391.0], [30.2, 392.0], [30.3, 393.0], [30.4, 394.0], [30.5, 395.0], [30.6, 396.0], [30.7, 398.0], [30.8, 399.0], [30.9, 400.0], [31.0, 401.0], [31.1, 404.0], [31.2, 406.0], [31.3, 407.0], [31.4, 443.0], [31.5, 452.0], [31.6, 503.0], [31.7, 504.0], [31.8, 506.0], [31.9, 506.0], [32.0, 506.0], [32.1, 507.0], [32.2, 507.0], [32.3, 508.0], [32.4, 509.0], [32.5, 511.0], [32.6, 512.0], [32.7, 512.0], [32.8, 513.0], [32.9, 513.0], [33.0, 514.0], [33.1, 514.0], [33.2, 515.0], [33.3, 515.0], [33.4, 515.0], [33.5, 516.0], [33.6, 516.0], [33.7, 516.0], [33.8, 516.0], [33.9, 517.0], [34.0, 517.0], [34.1, 517.0], [34.2, 517.0], [34.3, 518.0], [34.4, 518.0], [34.5, 518.0], [34.6, 519.0], [34.7, 519.0], [34.8, 520.0], [34.9, 520.0], [35.0, 520.0], [35.1, 521.0], [35.2, 521.0], [35.3, 521.0], [35.4, 522.0], [35.5, 523.0], [35.6, 524.0], [35.7, 526.0], [35.8, 528.0], [35.9, 528.0], [36.0, 529.0], [36.1, 530.0], [36.2, 531.0], [36.3, 532.0], [36.4, 532.0], [36.5, 533.0], [36.6, 534.0], [36.7, 534.0], [36.8, 535.0], [36.9, 535.0], [37.0, 535.0], [37.1, 536.0], [37.2, 536.0], [37.3, 536.0], [37.4, 537.0], [37.5, 537.0], [37.6, 537.0], [37.7, 538.0], [37.8, 538.0], [37.9, 538.0], [38.0, 538.0], [38.1, 539.0], [38.2, 539.0], [38.3, 539.0], [38.4, 539.0], [38.5, 540.0], [38.6, 540.0], [38.7, 540.0], [38.8, 540.0], [38.9, 541.0], [39.0, 541.0], [39.1, 541.0], [39.2, 541.0], [39.3, 542.0], [39.4, 542.0], [39.5, 542.0], [39.6, 543.0], [39.7, 543.0], [39.8, 543.0], [39.9, 543.0], [40.0, 543.0], [40.1, 544.0], [40.2, 544.0], [40.3, 544.0], [40.4, 545.0], [40.5, 545.0], [40.6, 545.0], [40.7, 545.0], [40.8, 546.0], [40.9, 546.0], [41.0, 547.0], [41.1, 547.0], [41.2, 547.0], [41.3, 548.0], [41.4, 548.0], [41.5, 549.0], [41.6, 549.0], [41.7, 549.0], [41.8, 550.0], [41.9, 550.0], [42.0, 551.0], [42.1, 553.0], [42.2, 554.0], [42.3, 555.0], [42.4, 556.0], [42.5, 557.0], [42.6, 558.0], [42.7, 558.0], [42.8, 559.0], [42.9, 559.0], [43.0, 560.0], [43.1, 560.0], [43.2, 561.0], [43.3, 561.0], [43.4, 562.0], [43.5, 563.0], [43.6, 564.0], [43.7, 564.0], [43.8, 566.0], [43.9, 567.0], [44.0, 568.0], [44.1, 569.0], [44.2, 570.0], [44.3, 572.0], [44.4, 573.0], [44.5, 574.0], [44.6, 576.0], [44.7, 579.0], [44.8, 582.0], [44.9, 585.0], [45.0, 588.0], [45.1, 592.0], [45.2, 594.0], [45.3, 596.0], [45.4, 597.0], [45.5, 598.0], [45.6, 600.0], [45.7, 601.0], [45.8, 602.0], [45.9, 603.0], [46.0, 604.0], [46.1, 605.0], [46.2, 607.0], [46.3, 607.0], [46.4, 609.0], [46.5, 613.0], [46.6, 615.0], [46.7, 615.0], [46.8, 617.0], [46.9, 618.0], [47.0, 619.0], [47.1, 619.0], [47.2, 621.0], [47.3, 622.0], [47.4, 624.0], [47.5, 625.0], [47.6, 626.0], [47.7, 628.0], [47.8, 630.0], [47.9, 631.0], [48.0, 632.0], [48.1, 633.0], [48.2, 634.0], [48.3, 636.0], [48.4, 637.0], [48.5, 638.0], [48.6, 639.0], [48.7, 640.0], [48.8, 641.0], [48.9, 642.0], [49.0, 643.0], [49.1, 643.0], [49.2, 644.0], [49.3, 644.0], [49.4, 645.0], [49.5, 645.0], [49.6, 645.0], [49.7, 646.0], [49.8, 647.0], [49.9, 647.0], [50.0, 648.0], [50.1, 649.0], [50.2, 650.0], [50.3, 653.0], [50.4, 653.0], [50.5, 654.0], [50.6, 655.0], [50.7, 656.0], [50.8, 657.0], [50.9, 657.0], [51.0, 658.0], [51.1, 658.0], [51.2, 659.0], [51.3, 660.0], [51.4, 661.0], [51.5, 661.0], [51.6, 663.0], [51.7, 664.0], [51.8, 667.0], [51.9, 669.0], [52.0, 669.0], [52.1, 670.0], [52.2, 671.0], [52.3, 672.0], [52.4, 673.0], [52.5, 675.0], [52.6, 676.0], [52.7, 677.0], [52.8, 678.0], [52.9, 680.0], [53.0, 688.0], [53.1, 690.0], [53.2, 692.0], [53.3, 693.0], [53.4, 695.0], [53.5, 699.0], [53.6, 703.0], [53.7, 705.0], [53.8, 705.0], [53.9, 706.0], [54.0, 707.0], [54.1, 707.0], [54.2, 708.0], [54.3, 709.0], [54.4, 710.0], [54.5, 711.0], [54.6, 712.0], [54.7, 714.0], [54.8, 730.0], [54.9, 764.0], [55.0, 796.0], [55.1, 802.0], [55.2, 813.0], [55.3, 817.0], [55.4, 818.0], [55.5, 819.0], [55.6, 820.0], [55.7, 821.0], [55.8, 822.0], [55.9, 830.0], [56.0, 842.0], [56.1, 872.0], [56.2, 875.0], [56.3, 879.0], [56.4, 882.0], [56.5, 891.0], [56.6, 893.0], [56.7, 895.0], [56.8, 896.0], [56.9, 898.0], [57.0, 899.0], [57.1, 900.0], [57.2, 901.0], [57.3, 920.0], [57.4, 936.0], [57.5, 939.0], [57.6, 940.0], [57.7, 942.0], [57.8, 943.0], [57.9, 945.0], [58.0, 947.0], [58.1, 951.0], [58.2, 957.0], [58.3, 959.0], [58.4, 963.0], [58.5, 968.0], [58.6, 973.0], [58.7, 985.0], [58.8, 1010.0], [58.9, 1013.0], [59.0, 1017.0], [59.1, 1020.0], [59.2, 1022.0], [59.3, 1023.0], [59.4, 1023.0], [59.5, 1024.0], [59.6, 1025.0], [59.7, 1025.0], [59.8, 1026.0], [59.9, 1027.0], [60.0, 1028.0], [60.1, 1028.0], [60.2, 1029.0], [60.3, 1031.0], [60.4, 1032.0], [60.5, 1037.0], [60.6, 1043.0], [60.7, 1048.0], [60.8, 1050.0], [60.9, 1052.0], [61.0, 1053.0], [61.1, 1056.0], [61.2, 1058.0], [61.3, 1063.0], [61.4, 1066.0], [61.5, 1068.0], [61.6, 1069.0], [61.7, 1069.0], [61.8, 1070.0], [61.9, 1072.0], [62.0, 1073.0], [62.1, 1073.0], [62.2, 1074.0], [62.3, 1075.0], [62.4, 1075.0], [62.5, 1076.0], [62.6, 1077.0], [62.7, 1079.0], [62.8, 1081.0], [62.9, 1081.0], [63.0, 1082.0], [63.1, 1083.0], [63.2, 1084.0], [63.3, 1086.0], [63.4, 1087.0], [63.5, 1088.0], [63.6, 1089.0], [63.7, 1090.0], [63.8, 1091.0], [63.9, 1092.0], [64.0, 1094.0], [64.1, 1095.0], [64.2, 1098.0], [64.3, 1099.0], [64.4, 1099.0], [64.5, 1100.0], [64.6, 1101.0], [64.7, 1102.0], [64.8, 1104.0], [64.9, 1106.0], [65.0, 1107.0], [65.1, 1108.0], [65.2, 1108.0], [65.3, 1109.0], [65.4, 1109.0], [65.5, 1111.0], [65.6, 1112.0], [65.7, 1113.0], [65.8, 1116.0], [65.9, 1118.0], [66.0, 1120.0], [66.1, 1122.0], [66.2, 1123.0], [66.3, 1125.0], [66.4, 1129.0], [66.5, 1131.0], [66.6, 1132.0], [66.7, 1134.0], [66.8, 1137.0], [66.9, 1140.0], [67.0, 1142.0], [67.1, 1143.0], [67.2, 1145.0], [67.3, 1147.0], [67.4, 1150.0], [67.5, 1152.0], [67.6, 1153.0], [67.7, 1155.0], [67.8, 1156.0], [67.9, 1156.0], [68.0, 1157.0], [68.1, 1158.0], [68.2, 1158.0], [68.3, 1159.0], [68.4, 1159.0], [68.5, 1160.0], [68.6, 1160.0], [68.7, 1161.0], [68.8, 1162.0], [68.9, 1164.0], [69.0, 1165.0], [69.1, 1166.0], [69.2, 1168.0], [69.3, 1170.0], [69.4, 1174.0], [69.5, 1176.0], [69.6, 1181.0], [69.7, 1189.0], [69.8, 1194.0], [69.9, 1237.0], [70.0, 1241.0], [70.1, 1244.0], [70.2, 1266.0], [70.3, 1271.0], [70.4, 1275.0], [70.5, 1278.0], [70.6, 1290.0], [70.7, 1304.0], [70.8, 1307.0], [70.9, 1312.0], [71.0, 1330.0], [71.1, 1389.0], [71.2, 1420.0], [71.3, 1424.0], [71.4, 1435.0], [71.5, 1439.0], [71.6, 1441.0], [71.7, 1443.0], [71.8, 1444.0], [71.9, 1445.0], [72.0, 1447.0], [72.1, 1454.0], [72.2, 1455.0], [72.3, 1458.0], [72.4, 1461.0], [72.5, 1478.0], [72.6, 1523.0], [72.7, 1526.0], [72.8, 1528.0], [72.9, 1530.0], [73.0, 1531.0], [73.1, 1533.0], [73.2, 1535.0], [73.3, 1539.0], [73.4, 1542.0], [73.5, 1543.0], [73.6, 1545.0], [73.7, 1546.0], [73.8, 1547.0], [73.9, 1549.0], [74.0, 1551.0], [74.1, 1552.0], [74.2, 1553.0], [74.3, 1554.0], [74.4, 1554.0], [74.5, 1555.0], [74.6, 1555.0], [74.7, 1556.0], [74.8, 1557.0], [74.9, 1557.0], [75.0, 1558.0], [75.1, 1558.0], [75.2, 1559.0], [75.3, 1559.0], [75.4, 1560.0], [75.5, 1560.0], [75.6, 1560.0], [75.7, 1561.0], [75.8, 1561.0], [75.9, 1562.0], [76.0, 1562.0], [76.1, 1563.0], [76.2, 1563.0], [76.3, 1564.0], [76.4, 1565.0], [76.5, 1566.0], [76.6, 1567.0], [76.7, 1568.0], [76.8, 1569.0], [76.9, 1570.0], [77.0, 1571.0], [77.1, 1571.0], [77.2, 1572.0], [77.3, 1573.0], [77.4, 1576.0], [77.5, 1577.0], [77.6, 1580.0], [77.7, 1582.0], [77.8, 1598.0], [77.9, 1602.0], [78.0, 1605.0], [78.1, 1607.0], [78.2, 1610.0], [78.3, 1611.0], [78.4, 1614.0], [78.5, 1619.0], [78.6, 1627.0], [78.7, 1629.0], [78.8, 1633.0], [78.9, 1636.0], [79.0, 1641.0], [79.1, 1643.0], [79.2, 1645.0], [79.3, 1648.0], [79.4, 1650.0], [79.5, 1652.0], [79.6, 1653.0], [79.7, 1655.0], [79.8, 1657.0], [79.9, 1659.0], [80.0, 1660.0], [80.1, 1661.0], [80.2, 1662.0], [80.3, 1663.0], [80.4, 1664.0], [80.5, 1665.0], [80.6, 1666.0], [80.7, 1667.0], [80.8, 1667.0], [80.9, 1669.0], [81.0, 1671.0], [81.1, 1674.0], [81.2, 1675.0], [81.3, 1679.0], [81.4, 1700.0], [81.5, 1710.0], [81.6, 1720.0], [81.7, 1726.0], [81.8, 1729.0], [81.9, 1731.0], [82.0, 1734.0], [82.1, 1735.0], [82.2, 1736.0], [82.3, 1748.0], [82.4, 1751.0], [82.5, 1771.0], [82.6, 1775.0], [82.7, 1776.0], [82.8, 1778.0], [82.9, 1783.0], [83.0, 1787.0], [83.1, 1802.0], [83.2, 1816.0], [83.3, 1820.0], [83.4, 1825.0], [83.5, 1915.0], [83.6, 1920.0], [83.7, 1926.0], [83.8, 1929.0], [83.9, 1932.0], [84.0, 1934.0], [84.1, 1937.0], [84.2, 1940.0], [84.3, 1945.0], [84.4, 1948.0], [84.5, 1951.0], [84.6, 1953.0], [84.7, 1955.0], [84.8, 1962.0], [84.9, 1967.0], [85.0, 1970.0], [85.1, 1973.0], [85.2, 1987.0], [85.3, 1989.0], [85.4, 1992.0], [85.5, 1996.0], [85.6, 2007.0], [85.7, 2022.0], [85.8, 2027.0], [85.9, 2029.0], [86.0, 2030.0], [86.1, 2032.0], [86.2, 2033.0], [86.3, 2033.0], [86.4, 2034.0], [86.5, 2035.0], [86.6, 2036.0], [86.7, 2037.0], [86.8, 2037.0], [86.9, 2039.0], [87.0, 2039.0], [87.1, 2041.0], [87.2, 2041.0], [87.3, 2042.0], [87.4, 2042.0], [87.5, 2043.0], [87.6, 2044.0], [87.7, 2045.0], [87.8, 2045.0], [87.9, 2046.0], [88.0, 2047.0], [88.1, 2047.0], [88.2, 2048.0], [88.3, 2049.0], [88.4, 2050.0], [88.5, 2051.0], [88.6, 2052.0], [88.7, 2053.0], [88.8, 2055.0], [88.9, 2056.0], [89.0, 2058.0], [89.1, 2061.0], [89.2, 2063.0], [89.3, 2065.0], [89.4, 2069.0], [89.5, 2072.0], [89.6, 2075.0], [89.7, 2076.0], [89.8, 2078.0], [89.9, 2079.0], [90.0, 2080.0], [90.1, 2082.0], [90.2, 2083.0], [90.3, 2086.0], [90.4, 2091.0], [90.5, 2098.0], [90.6, 2100.0], [90.7, 2103.0], [90.8, 2105.0], [90.9, 2107.0], [91.0, 2109.0], [91.1, 2110.0], [91.2, 2113.0], [91.3, 2114.0], [91.4, 2116.0], [91.5, 2118.0], [91.6, 2119.0], [91.7, 2120.0], [91.8, 2121.0], [91.9, 2122.0], [92.0, 2123.0], [92.1, 2125.0], [92.2, 2126.0], [92.3, 2127.0], [92.4, 2129.0], [92.5, 2132.0], [92.6, 2137.0], [92.7, 2139.0], [92.8, 2140.0], [92.9, 2143.0], [93.0, 2145.0], [93.1, 2147.0], [93.2, 2149.0], [93.3, 2151.0], [93.4, 2154.0], [93.5, 2158.0], [93.6, 2160.0], [93.7, 2162.0], [93.8, 2167.0], [93.9, 2172.0], [94.0, 2175.0], [94.1, 2180.0], [94.2, 2184.0], [94.3, 2188.0], [94.4, 2194.0], [94.5, 2205.0], [94.6, 2213.0], [94.7, 2217.0], [94.8, 2222.0], [94.9, 2224.0], [95.0, 2228.0], [95.1, 2232.0], [95.2, 2236.0], [95.3, 2238.0], [95.4, 2242.0], [95.5, 2245.0], [95.6, 2255.0], [95.7, 2257.0], [95.8, 2258.0], [95.9, 2264.0], [96.0, 2272.0], [96.1, 2277.0], [96.2, 2280.0], [96.3, 2286.0], [96.4, 2288.0], [96.5, 2289.0], [96.6, 2293.0], [96.7, 2300.0], [96.8, 2304.0], [96.9, 2310.0], [97.0, 2314.0], [97.1, 2319.0], [97.2, 2322.0], [97.3, 2326.0], [97.4, 2328.0], [97.5, 2331.0], [97.6, 2343.0], [97.7, 2352.0], [97.8, 2366.0], [97.9, 2389.0], [98.0, 2402.0], [98.1, 2405.0], [98.2, 2409.0], [98.3, 2410.0], [98.4, 2412.0], [98.5, 2420.0], [98.6, 2425.0], [98.7, 2429.0], [98.8, 2436.0], [98.9, 2444.0], [99.0, 2449.0], [99.1, 2464.0], [99.2, 2473.0], [99.3, 2476.0], [99.4, 2482.0], [99.5, 2510.0], [99.6, 2550.0], [99.7, 2555.0], [99.8, 2579.0], [99.9, 2613.0], [100.0, 2690.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 14.0, "minX": 0.0, "maxY": 1744.0, "series": [{"data": [[0.0, 1744.0], [600.0, 796.0], [700.0, 155.0], [800.0, 200.0], [900.0, 171.0], [1000.0, 568.0], [1100.0, 539.0], [1200.0, 83.0], [1300.0, 49.0], [1400.0, 138.0], [1500.0, 530.0], [100.0, 827.0], [1600.0, 356.0], [1700.0, 169.0], [1800.0, 33.0], [1900.0, 212.0], [2000.0, 506.0], [2100.0, 386.0], [2200.0, 222.0], [2300.0, 129.0], [2400.0, 147.0], [2500.0, 43.0], [2600.0, 14.0], [200.0, 333.0], [300.0, 178.0], [400.0, 70.0], [500.0, 1402.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2747.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 4101.0, "series": [{"data": [[0.0, 3152.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 4101.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2747.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 3584.779600000004, "minX": 1.76082102E12, "maxY": 3584.779600000004, "series": [{"data": [[1.76082102E12, 3584.779600000004]], "isOverall": false, "label": "Users Request", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.76082102E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 5.5, "minX": 6.0, "maxY": 2613.0, "series": [{"data": [[6.0, 2032.6666666666667], [7.0, 2031.0], [8.0, 2032.0], [9.0, 2032.25], [12.0, 2033.0], [13.0, 2035.0], [16.0, 2033.0], [19.0, 2032.5], [22.0, 2034.25], [24.0, 2032.5], [26.0, 2031.0], [30.0, 2034.25], [32.0, 2028.0], [34.0, 2034.6666666666667], [36.0, 2033.0], [39.0, 2033.3333333333333], [43.0, 2027.0], [42.0, 2031.3333333333333], [45.0, 2032.0], [47.0, 2035.0], [51.0, 2032.0], [50.0, 2035.0], [53.0, 2033.5], [52.0, 2027.0], [54.0, 2033.0], [57.0, 2034.0], [56.0, 2034.0], [59.0, 2028.0], [58.0, 2028.0], [60.0, 2035.5], [63.0, 2034.0], [66.0, 2023.0], [65.0, 2032.5], [70.0, 2028.25], [74.0, 2028.0], [79.0, 2039.0], [78.0, 1533.0], [77.0, 1138.0], [82.0, 2038.0], [81.0, 2037.5], [80.0, 2040.0], [87.0, 2043.0], [85.0, 2040.3333333333333], [89.0, 2039.0], [88.0, 2040.5], [95.0, 2037.0], [94.0, 2043.0], [93.0, 2039.25], [98.0, 1702.3333333333333], [101.0, 2034.0], [100.0, 2042.5], [106.0, 2037.0], [104.0, 2037.0], [111.0, 2050.5], [110.0, 2050.0], [108.0, 2036.0], [115.0, 2048.3333333333335], [118.0, 2046.75], [123.0, 2046.0], [120.0, 2048.0], [126.0, 2044.0], [125.0, 2048.0], [135.0, 2045.0], [134.0, 2043.0], [132.0, 2042.0], [131.0, 2040.0], [130.0, 2048.0], [128.0, 2042.0], [143.0, 2043.0], [141.0, 2045.3333333333333], [139.0, 2042.0], [138.0, 2043.0], [137.0, 2045.0], [136.0, 2046.0], [148.0, 2042.0], [146.0, 2041.0], [145.0, 2046.0], [159.0, 2045.25], [155.0, 2043.5], [153.0, 2044.0], [152.0, 2043.5], [167.0, 2040.0], [166.0, 2046.0], [164.0, 2040.0], [172.0, 2043.3333333333333], [169.0, 2043.0], [168.0, 2045.0], [183.0, 2042.0], [181.0, 2044.3333333333333], [180.0, 2047.0], [178.0, 2040.5], [190.0, 2026.0], [189.0, 2035.5], [188.0, 2041.5], [186.0, 2041.0], [185.0, 2041.0], [198.0, 1036.5], [197.0, 1029.0], [196.0, 1028.0], [194.0, 2027.6666666666667], [193.0, 2027.0], [203.0, 1028.0], [202.0, 1028.0], [201.0, 1030.0], [200.0, 1028.0], [215.0, 1028.0], [213.0, 1030.25], [209.0, 1037.0], [208.0, 1027.6], [220.0, 1025.5], [218.0, 1026.0], [217.0, 1030.0], [216.0, 1036.0], [229.0, 1039.0], [228.0, 1026.5], [226.0, 1025.0], [225.0, 1035.0], [224.0, 1024.6666666666667], [238.0, 1032.5], [236.0, 1028.0], [235.0, 1029.5], [233.0, 1025.5], [247.0, 1027.1666666666667], [246.0, 1032.0], [240.0, 1034.5], [254.0, 1023.5], [252.0, 1029.6], [270.0, 1023.0], [271.0, 1020.5], [269.0, 1023.0], [267.0, 1023.0], [266.0, 1023.0], [265.0, 1025.0], [264.0, 1023.5], [260.0, 1020.3333333333334], [257.0, 1023.3333333333334], [287.0, 516.5], [285.0, 1018.75], [281.0, 1022.0], [278.0, 1019.0], [277.0, 1022.0], [302.0, 515.75], [301.0, 516.0], [297.0, 515.0], [296.0, 516.25], [294.0, 516.0], [291.0, 517.3333333333334], [288.0, 516.0], [307.0, 505.0], [319.0, 503.5], [315.0, 503.25], [313.0, 503.0], [310.0, 503.0], [309.0, 504.0], [308.0, 503.0], [305.0, 504.0], [304.0, 504.0], [331.0, 1780.5], [330.0, 1528.0], [329.0, 1528.0], [326.0, 1525.0], [324.0, 1532.0], [323.0, 1532.0], [322.0, 1529.0], [320.0, 501.0], [345.0, 1780.5], [344.0, 1522.0], [341.0, 1530.6666666666667], [338.0, 1528.75], [336.0, 1655.5], [367.0, 2154.0], [366.0, 2148.0], [365.0, 2146.0], [364.0, 2149.0], [363.0, 2153.0], [362.0, 2149.0], [361.0, 2159.0], [359.0, 1804.2666666666667], [383.0, 2147.0], [382.0, 1729.3333333333333], [371.0, 2149.0], [370.0, 2159.0], [369.0, 2159.0], [368.0, 2152.0], [379.0, 509.0], [378.0, 2150.0], [377.0, 2147.0], [376.0, 2143.0], [375.0, 2151.0], [374.0, 2156.0], [373.0, 2146.0], [372.0, 2151.0], [398.0, 1015.5], [399.0, 2139.0], [396.0, 2150.0], [387.0, 1018.0], [386.0, 1524.0], [395.0, 1533.0], [394.0, 507.0], [393.0, 507.0], [392.0, 1396.6666666666667], [391.0, 507.0], [389.0, 511.0], [403.0, 516.0], [414.0, 507.0], [413.0, 1014.5], [411.0, 504.0], [410.0, 2137.0], [408.0, 1017.5], [406.0, 508.0], [407.0, 506.0], [404.0, 2138.0], [402.0, 508.0], [401.0, 506.0], [400.0, 506.0], [418.0, 1547.0], [429.0, 1542.0], [431.0, 1548.0], [428.0, 1742.3333333333333], [425.0, 1543.0], [424.0, 1744.3333333333333], [423.0, 1551.0], [420.0, 1547.5], [417.0, 2137.0], [416.0, 2142.0], [445.0, 1567.0], [447.0, 2134.0], [444.0, 1559.0], [435.0, 1543.0], [434.0, 1541.0], [433.0, 1543.5], [443.0, 2131.0], [442.0, 2131.0], [441.0, 1567.0], [440.0, 1558.0], [438.0, 1557.0], [436.0, 2143.0], [462.0, 1753.6666666666667], [463.0, 2123.0], [460.0, 1562.0], [458.0, 1749.6666666666667], [457.0, 1568.0], [456.0, 1563.5], [452.0, 1842.5], [450.0, 1561.0], [448.0, 1565.5], [478.0, 1559.0], [479.0, 1562.0], [477.0, 1563.6666666666667], [474.0, 2128.5], [472.0, 1556.5], [468.0, 2124.0], [467.0, 1560.0], [466.0, 1561.5], [464.0, 1564.0], [483.0, 1558.5], [494.0, 1935.6666666666667], [492.0, 2131.0], [491.0, 1556.0], [488.0, 1560.0], [487.0, 1558.5], [486.0, 2134.0], [481.0, 1561.0], [480.0, 2125.0], [505.0, 1557.5], [503.0, 2132.0], [502.0, 1560.0], [501.0, 2120.0], [500.0, 1550.0], [499.0, 1555.3333333333333], [496.0, 1561.0], [531.0, 1563.5], [543.0, 1560.0], [540.0, 1560.3333333333333], [537.0, 1555.5], [517.0, 1553.0], [527.0, 1562.0], [525.0, 1558.3], [524.0, 1558.5714285714287], [522.0, 1559.5], [535.0, 1555.0], [533.0, 1560.0], [532.0, 1560.0], [529.0, 1559.5], [528.0, 1560.0], [558.0, 1561.0], [570.0, 1557.1666666666667], [574.0, 1558.25], [568.0, 1561.0], [549.0, 1562.0], [548.0, 1556.5], [547.0, 1561.0], [546.0, 1561.0], [563.0, 1560.0], [562.0, 1556.0], [557.0, 1564.0], [556.0, 1551.0], [555.0, 1560.5], [554.0, 1558.0], [552.0, 1555.6666666666667], [603.0, 1556.0], [606.0, 1556.0], [607.0, 1555.0], [604.0, 1558.0], [602.0, 1555.0], [579.0, 1557.0], [577.0, 1552.0], [576.0, 1557.0], [594.0, 1558.0], [593.0, 1559.0], [586.0, 1554.0], [584.0, 1555.0], [635.0, 1947.6666666666667], [639.0, 2121.0], [632.0, 1739.25], [615.0, 1557.0], [614.0, 1554.0], [613.0, 1551.0], [612.0, 1557.0], [611.0, 1557.0], [609.0, 1554.5], [630.0, 1863.5], [629.0, 1511.0], [625.0, 1613.0], [622.0, 1108.5], [621.0, 1619.0], [619.0, 1596.0], [617.0, 1554.0], [616.0, 1555.0], [658.0, 1609.0], [671.0, 2122.0], [670.0, 2119.0], [669.0, 1864.857142857143], [664.0, 1607.0], [655.0, 2112.5], [643.0, 2119.3333333333335], [640.0, 1865.0], [647.0, 1608.0], [645.0, 1864.0], [653.0, 1606.0], [652.0, 2119.25], [648.0, 1612.5], [663.0, 2118.0], [662.0, 1946.3333333333333], [660.0, 2116.0], [657.0, 2120.0], [699.0, 1886.7777777777778], [702.0, 2104.0], [698.0, 2014.6], [697.0, 1604.0], [696.0, 2110.0], [695.0, 1771.0], [694.0, 2118.0], [691.0, 2112.0], [682.0, 2110.5], [672.0, 1605.0], [677.0, 1602.0], [734.0, 2103.0], [735.0, 2104.0], [732.0, 2106.5], [728.0, 2104.0], [725.0, 2113.0], [724.0, 2099.0], [723.0, 2102.0], [721.0, 1930.3333333333333], [718.0, 1856.25], [706.0, 1981.75], [704.0, 1890.5714285714287], [708.0, 2099.0], [707.0, 2112.0], [711.0, 1604.5], [709.0, 1601.0], [715.0, 2104.0], [713.0, 2101.0], [712.0, 1606.0], [737.0, 1603.0], [926.0, 2091.0], [924.0, 1591.0], [919.0, 1588.0], [918.0, 2087.0], [908.0, 2090.0], [906.0, 2092.0], [901.0, 1592.0], [898.0, 1593.0], [953.0, 2091.0], [952.0, 2095.0], [949.0, 2091.0], [937.0, 2068.0], [932.0, 2094.0], [990.0, 1569.0], [991.0, 1569.0], [978.0, 543.0], [976.0, 1866.625], [980.0, 1730.3333333333333], [979.0, 1570.0], [989.0, 1805.0], [988.0, 2075.0], [986.0, 801.25], [985.0, 1814.5], [984.0, 1690.5], [975.0, 2044.75], [974.0, 2042.0], [973.0, 1849.375], [971.0, 2069.0], [968.0, 2070.0], [983.0, 1645.6666666666665], [981.0, 1564.3333333333333], [1005.0, 2074.8], [1014.0, 2613.0], [1004.0, 1827.0], [1003.0, 2066.0], [1002.0, 1743.0], [1001.0, 1573.8], [999.0, 1904.3333333333333], [998.0, 1776.4], [997.0, 2058.0], [996.0, 1903.6666666666667], [995.0, 1367.4], [994.0, 1568.5], [993.0, 1690.25], [992.0, 1568.0], [1064.0, 610.0], [1036.0, 606.0], [1030.0, 1619.6666666666665], [1028.0, 104.0], [1148.0, 621.0], [1150.0, 514.0], [1124.0, 615.0], [1122.0, 612.5], [1144.0, 613.0], [1142.0, 1098.0], [1140.0, 618.0], [1138.0, 856.0], [1136.0, 614.5], [1134.0, 615.0], [1128.0, 1754.0], [1202.0, 157.0], [1190.0, 516.0], [1212.0, 1316.2], [1210.0, 1290.0], [1204.0, 2422.0], [1180.0, 516.5], [1152.0, 510.0], [1156.0, 516.25], [1154.0, 515.0], [1160.0, 514.6666666666666], [1158.0, 517.5], [1164.0, 516.0], [1162.0, 516.4], [1178.0, 516.5], [1176.0, 519.0], [1174.0, 513.5], [1196.0, 2026.3333333333333], [1194.0, 1567.0], [1192.0, 695.3333333333333], [1186.0, 518.5], [1184.0, 519.5], [1278.0, 2034.6666666666667], [1276.0, 2448.0], [1274.0, 2061.5000000000005], [1272.0, 1850.0], [1270.0, 1276.0], [1390.0, 1826.3636363636363], [1388.0, 547.3333333333334], [1386.0, 1306.5], [1384.0, 168.33333333333334], [1382.0, 931.3333333333334], [1376.0, 655.0], [1490.0, 1547.0], [1488.0, 2046.0], [1484.0, 2051.3333333333335], [1478.0, 2051.0], [1562.0, 1552.5], [1560.0, 1809.0], [1556.0, 2059.3333333333335], [1554.0, 1870.25], [1552.0, 1806.0], [1548.0, 1656.2], [1628.0, 2046.2777777777778], [1652.0, 1533.0], [1634.0, 2304.0], [1630.0, 2078.6666666666665], [1610.0, 2061.0], [1626.0, 1693.75], [1624.0, 2077.0], [1622.0, 1571.0], [1616.0, 1554.0], [1614.0, 2060.0], [1612.0, 1557.0], [1752.0, 2337.0], [1824.0, 1546.0], [1822.0, 2051.0], [1900.0, 1042.0], [1864.0, 2050.0], [2032.0, 2333.0], [2604.0, 2338.0], [2716.0, 606.5], [2880.0, 507.25], [2896.0, 552.0], [2940.0, 6.0], [2888.0, 526.25], [2892.0, 545.3333333333334], [2900.0, 552.0], [2932.0, 5.5], [2972.0, 538.0], [3064.0, 126.5], [2976.0, 547.3333333333333], [2980.0, 556.0], [2984.0, 278.0], [2996.0, 337.8], [2992.0, 560.0], [3044.0, 533.0], [3040.0, 213.33333333333334], [2964.0, 543.75], [2960.0, 364.66666666666663], [2956.0, 545.0], [2948.0, 544.6], [3048.0, 178.5], [3056.0, 538.6666666666666], [3008.0, 540.0], [3012.0, 545.8333333333333], [3020.0, 493.3333333333333], [3016.0, 560.5], [3028.0, 534.0], [3024.0, 444.6], [3032.0, 535.0], [3068.0, 39.5], [3092.0, 305.125], [3072.0, 79.93939393939397], [3132.0, 343.3333333333333], [3124.0, 569.0], [3112.0, 35.0], [3108.0, 520.0], [3116.0, 536.0], [3120.0, 38.0], [3084.0, 195.42499999999998], [3088.0, 443.4], [3100.0, 358.0], [3176.0, 603.0], [3184.0, 894.7142857142857], [3196.0, 942.0], [3192.0, 941.0], [3136.0, 187.8181818181818], [3148.0, 323.75], [3152.0, 724.6666666666666], [3144.0, 964.0], [3156.0, 162.0], [3080.0, 470.85714285714283], [3076.0, 59.24242424242424], [3204.0, 756.6], [3228.0, 949.5], [3260.0, 223.0], [3200.0, 599.0], [3216.0, 163.41666666666669], [3248.0, 936.0], [3252.0, 52.0], [3256.0, 707.6666666666666], [3300.0, 185.0], [3268.0, 593.0], [3264.0, 820.6666666666666], [3324.0, 187.0], [3320.0, 196.66666666666666], [3316.0, 182.0], [3312.0, 195.0], [3308.0, 193.0], [3296.0, 127.0], [3232.0, 945.0], [3236.0, 710.0], [3240.0, 67.0], [3280.0, 795.3333333333334], [3284.0, 38.0], [3288.0, 114.33333333333334], [3292.0, 188.5], [3432.0, 798.75], [3352.0, 154.5], [3424.0, 79.0], [3392.0, 74.0], [3452.0, 179.0], [3436.0, 69.5], [3448.0, 2366.0], [3400.0, 320.0], [3404.0, 71.0], [3412.0, 69.5], [3420.0, 67.5], [3416.0, 72.0], [3348.0, 386.0], [3344.0, 455.8181818181818], [3336.0, 269.5], [3340.0, 211.6], [3388.0, 131.25], [3384.0, 71.66666666666667], [3380.0, 233.4], [3372.0, 218.0], [3376.0, 261.5], [3368.0, 78.0], [3364.0, 224.0], [3360.0, 658.0], [3332.0, 199.66666666666666], [3572.0, 707.5882352941177], [3472.0, 77.0], [3560.0, 314.0], [3460.0, 372.8333333333333], [3576.0, 669.1249999999999], [3580.0, 2090.8], [3520.0, 2331.0], [3500.0, 467.3333333333333], [3548.0, 704.8333333333334], [3544.0, 2321.0], [3536.0, 2353.0], [3532.0, 82.0], [3592.0, 90.0], [3620.0, 95.0], [3656.0, 100.0], [3660.0, 102.0], [3588.0, 2322.0], [3584.0, 1754.75], [3828.0, 1458.0], [3724.0, 113.0], [3760.0, 583.25], [3796.0, 686.2349726775956], [3836.0, 1072.0], [3832.0, 1458.0], [3816.0, 1455.0], [3808.0, 1455.0], [3948.0, 23.0], [3872.0, 1268.5], [3952.0, 23.0], [3960.0, 27.0], [3964.0, 2303.0], [3928.0, 2286.0], [3924.0, 2310.0], [4084.0, 32.0], [4040.0, 28.0], [4008.0, 2295.5], [3984.0, 2305.0], [4088.0, 25.0], [4080.0, 2050.0], [4068.0, 1819.0], [4060.0, 2443.0], [3992.0, 2304.0], [4304.0, 72.0], [4216.0, 1231.3333333333333], [4128.0, 672.5], [4120.0, 28.0], [4112.0, 1807.0], [4144.0, 1819.0], [4136.0, 2321.0], [4296.0, 66.33333333333333], [4288.0, 62.5], [4312.0, 2133.25], [4208.0, 933.1666666666667], [4200.0, 794.4700854700853], [4176.0, 1120.0], [4160.0, 2326.0], [4248.0, 703.8484848484849], [4264.0, 179.0], [4584.0, 1157.3333333333333], [4600.0, 36.0], [4568.0, 2137.3333333333335], [4560.0, 65.0], [4576.0, 40.0], [4592.0, 1798.0], [4544.0, 976.0], [4416.0, 1098.5], [4552.0, 73.5], [4528.0, 1111.0], [4520.0, 506.0], [4512.0, 1250.820512820513], [4496.0, 1027.0], [4480.0, 1027.0], [4504.0, 1024.5], [4648.0, 1100.2916666666667], [4840.0, 2044.0], [4832.0, 2056.0], [4608.0, 1672.0], [4624.0, 1675.0], [4640.0, 1675.3333333333333], [4888.0, 1154.25], [5008.0, 602.9893617021278], [4928.0, 539.0], [4880.0, 141.0], [5168.0, 150.0], [5416.0, 217.0], [4329.0, 21.0], [4217.0, 463.8020477815702], [4113.0, 416.5], [4121.0, 620.3333333333333], [4289.0, 72.0], [4145.0, 1554.0], [4209.0, 668.0526315789474], [4193.0, 1693.5], [4177.0, 1312.0], [4169.0, 1310.0], [4161.0, 1307.0], [4201.0, 1859.0], [4233.0, 375.85714285714283], [4265.0, 57.0], [4257.0, 2403.0], [4241.0, 813.0], [4225.0, 1166.5], [4585.0, 1972.0], [4561.0, 569.1], [4569.0, 960.5], [4577.0, 1970.5], [4593.0, 1268.5], [4601.0, 1991.0], [4553.0, 72.0], [4545.0, 974.3333333333334], [4369.0, 2432.0], [4537.0, 683.25], [4513.0, 1003.8], [4505.0, 1026.5], [4481.0, 1023.0], [4521.0, 505.0], [4425.0, 1580.5], [4417.0, 1351.0], [4449.0, 29.0], [4649.0, 1387.7692307692307], [4841.0, 2039.0], [4849.0, 2046.0], [4833.0, 153.5], [4761.0, 1699.8], [4753.0, 2057.0], [4641.0, 1662.0], [4617.0, 2234.75], [4609.0, 1502.3333333333333], [4625.0, 2563.0], [5009.0, 576.3189655172416], [4985.0, 1545.0], [4865.0, 151.0], [4977.0, 1043.75], [4881.0, 138.99999999999997], [4889.0, 2050.0], [2769.0, 2402.6666666666665], [2745.0, 2343.0], [2933.0, 545.5], [2921.0, 544.5], [2893.0, 545.0], [2897.0, 551.0], [2905.0, 550.5], [2909.0, 549.5], [2929.0, 547.6666666666666], [2973.0, 561.5], [3021.0, 510.53333333333325], [3069.0, 161.07692307692307], [2981.0, 540.75], [2985.0, 550.6], [2993.0, 541.0], [2989.0, 563.0], [2997.0, 558.0], [3005.0, 557.0], [3045.0, 382.5], [2969.0, 566.0], [2961.0, 543.0], [2953.0, 545.7499999999999], [2949.0, 275.0], [3049.0, 274.0], [3009.0, 539.0], [3017.0, 489.1111111111112], [3025.0, 449.6], [3029.0, 537.8], [3037.0, 563.0], [3033.0, 565.25], [3065.0, 430.25], [3061.0, 529.0], [3057.0, 386.3333333333333], [3089.0, 58.16666666666667], [3117.0, 544.5], [3121.0, 608.5], [3125.0, 349.5], [3133.0, 231.33333333333331], [3105.0, 379.3333333333333], [3073.0, 61.4], [3077.0, 56.125], [3085.0, 333.82352941176475], [3093.0, 233.33333333333334], [3169.0, 39.0], [3177.0, 198.0], [3181.0, 961.0], [3185.0, 322.0], [3197.0, 945.0], [3189.0, 959.0], [3137.0, 366.5], [3141.0, 588.5], [3149.0, 942.0], [3145.0, 534.5], [3161.0, 716.75], [3081.0, 80.0], [3213.0, 203.0], [3301.0, 180.16666666666666], [3277.0, 162.0], [3205.0, 237.5], [3221.0, 650.3333333333333], [3229.0, 596.0], [3217.0, 16.200000000000003], [3257.0, 212.48663101604282], [3253.0, 768.5], [3249.0, 939.0], [3245.0, 938.0], [3273.0, 471.5], [3269.0, 951.0], [3265.0, 941.0], [3321.0, 464.2], [3313.0, 194.5], [3309.0, 193.0], [3305.0, 169.2], [3297.0, 149.66666666666666], [3233.0, 211.0], [3237.0, 814.5], [3281.0, 62.0], [3289.0, 131.0], [3293.0, 148.66666666666666], [3345.0, 204.33333333333334], [3433.0, 66.33333333333333], [3393.0, 137.27272727272725], [3453.0, 431.375], [3449.0, 1208.0], [3425.0, 66.0], [3437.0, 75.0], [3401.0, 1215.5], [3413.0, 69.0], [3357.0, 1230.6666666666667], [3349.0, 270.0], [3341.0, 900.75], [3337.0, 2319.0], [3329.0, 199.0], [3389.0, 74.66666666666667], [3385.0, 75.0], [3377.0, 226.25], [3381.0, 415.91666666666663], [3369.0, 77.25], [3373.0, 2345.0], [3365.0, 162.4], [3361.0, 218.0], [3557.0, 824.0], [3561.0, 313.5], [3461.0, 59.666666666666664], [3553.0, 85.0], [3465.0, 2357.0], [3577.0, 602.7391304347825], [3573.0, 714.2941176470588], [3521.0, 1582.6666666666667], [3497.0, 1213.5], [3501.0, 77.0], [3549.0, 372.25], [3545.0, 1180.0], [3533.0, 2355.0], [3525.0, 2310.0], [3657.0, 101.0], [3589.0, 1531.5], [3605.0, 93.0], [3673.0, 601.0], [3677.0, 602.0], [3837.0, 1457.5], [3761.0, 526.8786407766991], [3801.0, 987.0944206008588], [3821.0, 1457.0], [3817.0, 1070.0], [3813.0, 1462.0], [3809.0, 1446.5], [3865.0, 1458.0], [3957.0, 23.0], [3965.0, 21.0], [3945.0, 2311.0], [3989.0, 22.0], [4005.0, 23.0], [4017.0, 24.0], [4061.0, 29.0], [3969.0, 2307.0], [4085.0, 920.0], [4122.0, 928.5], [4202.0, 1555.4545454545455], [4194.0, 1322.6], [4186.0, 1305.6666666666667], [4210.0, 902.6666666666666], [4106.0, 1815.0], [4250.0, 1577.1739130434783], [4234.0, 59.0], [4282.0, 176.0], [4266.0, 119.5], [4314.0, 20.0], [4306.0, 72.0], [4154.0, 1818.0], [4138.0, 1303.5], [4322.0, 174.0], [4562.0, 1713.25], [4522.0, 388.87387387387366], [4458.0, 731.3333333333334], [4450.0, 1014.0], [4474.0, 2164.0], [4402.0, 38.333333333333336], [4546.0, 75.0], [4554.0, 71.0], [4570.0, 1842.25], [4578.0, 1969.5], [4586.0, 2201.222222222222], [4594.0, 1968.0], [4602.0, 37.333333333333336], [4650.0, 1292.3714285714286], [4834.0, 444.42857142857144], [4642.0, 1841.0], [4610.0, 60.0], [4890.0, 142.5], [4882.0, 143.33333333333334], [5074.0, 95.0], [5002.0, 1208.6666666666667], [4986.0, 797.5], [4994.0, 547.0], [4954.0, 584.0], [5154.0, 146.0], [4315.0, 1538.6666666666667], [4211.0, 1090.3333333333333], [4195.0, 1445.5], [4179.0, 2326.0], [4171.0, 1560.5], [4203.0, 1772.2], [4219.0, 2150.3333333333335], [4139.0, 2072.5], [4307.0, 72.0], [4155.0, 1301.0], [4235.0, 183.0], [4251.0, 1781.3544303797464], [4227.0, 1117.0], [4331.0, 2425.25], [4267.0, 180.0], [4275.0, 61.0], [4571.0, 2226.5], [4587.0, 2321.0], [4603.0, 36.0], [4403.0, 37.6], [4547.0, 972.0], [4579.0, 1630.0], [4563.0, 2143.6666666666665], [4555.0, 413.8333333333333], [4515.0, 509.3333333333333], [4507.0, 1025.5], [4499.0, 1023.0], [4427.0, 167.5], [4435.0, 378.0], [4451.0, 1016.0], [4491.0, 1022.0], [4483.0, 1029.0], [4595.0, 1794.3333333333333], [4747.0, 2153.0], [4635.0, 1160.3333333333333], [4627.0, 1666.0], [4619.0, 1503.3333333333333], [4611.0, 846.0], [5003.0, 1371.9565217391305], [4987.0, 51.0], [5051.0, 559.0], [4883.0, 137.4], [4891.0, 143.12500000000003], [5155.0, 145.0], [1063.0, 1586.0], [1049.0, 2085.0], [1031.0, 2389.6666666666665], [1027.0, 2385.25], [1149.0, 615.0], [1151.0, 583.3333333333334], [1125.0, 856.1666666666667], [1123.0, 1339.5], [1147.0, 1281.6296296296298], [1145.0, 778.3333333333334], [1141.0, 1592.25], [1139.0, 615.0], [1137.0, 615.0], [1101.0, 2061.0], [1099.0, 2063.0], [1091.0, 1584.0], [1135.0, 615.0], [1131.0, 615.0], [1187.0, 516.5], [1207.0, 2421.0], [1209.0, 2419.0], [1185.0, 517.4], [1205.0, 160.2], [1203.0, 157.5], [1201.0, 157.0], [1165.0, 522.0], [1163.0, 829.6], [1153.0, 518.6666666666666], [1179.0, 518.5], [1177.0, 516.5], [1175.0, 518.0], [1173.0, 517.5], [1171.0, 781.0], [1169.0, 513.0], [1197.0, 157.0], [1193.0, 1390.7777777777778], [1195.0, 1644.3749999999998], [1191.0, 518.75], [1277.0, 2048.3333333333335], [1273.0, 1845.0], [1271.0, 2414.6666666666665], [1391.0, 2460.0], [1389.0, 170.0], [1385.0, 168.0], [1383.0, 547.0], [1381.0, 166.66666666666666], [1379.0, 1309.0], [1377.0, 1009.6666666666667], [1375.0, 655.0], [1489.0, 2047.0], [1487.0, 2054.0], [1485.0, 1986.1250000000002], [1483.0, 2047.0], [1481.0, 2051.0], [1479.0, 2050.0], [1477.0, 1962.8333333333333], [1475.0, 1791.5], [1563.0, 1723.2500000000002], [1557.0, 1808.0], [1555.0, 1804.0], [1551.0, 2061.5], [1547.0, 2055.0], [1545.0, 2053.0], [1629.0, 1741.0], [1659.0, 2037.0], [1651.0, 1530.0], [1615.0, 1558.0], [1613.0, 1554.0], [1635.0, 2323.0], [1633.0, 1898.0], [1627.0, 1822.5], [1625.0, 2076.0], [1623.0, 1905.3333333333333], [1621.0, 1694.25], [1835.0, 2311.0], [1813.0, 2329.0], [1895.0, 2050.0], [1881.0, 1550.0], [1869.0, 2054.0], [1867.0, 2054.0], [1865.0, 1545.0], [2682.0, 607.0], [2766.0, 2376.6666666666665], [2762.0, 605.0], [2758.0, 604.1666666666667], [2918.0, 548.5], [2874.0, 507.0], [2938.0, 469.5714285714286], [2886.0, 280.5], [2910.0, 547.0], [2934.0, 545.0], [2922.0, 547.5], [3050.0, 47.0], [3042.0, 305.25], [2982.0, 557.0], [2990.0, 550.0], [2994.0, 545.4], [3006.0, 545.0], [2998.0, 559.0], [3046.0, 488.09999999999997], [2974.0, 553.0], [2970.0, 541.0], [3054.0, 140.0], [3070.0, 176.75], [3010.0, 537.0], [3014.0, 553.5555555555555], [3018.0, 561.25], [3022.0, 406.2857142857143], [3026.0, 145.0], [3030.0, 552.0], [3038.0, 535.75], [3034.0, 544.6666666666666], [3066.0, 49.0], [3062.0, 530.8888888888889], [3094.0, 106.66666666666667], [3078.0, 72.0], [3130.0, 966.0], [3126.0, 39.0], [3114.0, 429.83333333333337], [3110.0, 202.0], [3106.0, 520.0], [3086.0, 542.0], [3090.0, 84.76923076923077], [3098.0, 521.0], [3170.0, 323.5], [3174.0, 1196.0], [3178.0, 945.0], [3186.0, 114.0], [3194.0, 949.0], [3154.0, 44.0], [3150.0, 944.0], [3142.0, 341.6666666666667], [3162.0, 942.0], [3082.0, 36.0], [3074.0, 53.199999999999996], [3218.0, 99.98181818181821], [3206.0, 198.16666666666669], [3202.0, 551.4], [3214.0, 426.0], [3226.0, 770.0], [3230.0, 288.0], [3254.0, 288.0], [3246.0, 956.0], [3298.0, 144.25], [3322.0, 175.0], [3274.0, 2333.0], [3318.0, 181.375], [3314.0, 182.5], [3306.0, 192.0], [3302.0, 190.0], [3238.0, 50.0], [3234.0, 2329.0], [3242.0, 405.5], [3282.0, 260.0], [3286.0, 177.53846153846158], [3290.0, 170.1], [3294.0, 59.0], [3346.0, 537.3333333333333], [3394.0, 73.0], [3454.0, 76.0], [3434.0, 647.0], [3438.0, 239.37500000000003], [3398.0, 312.6666666666667], [3410.0, 171.4], [3402.0, 71.0], [3414.0, 68.0], [3350.0, 215.33333333333331], [3358.0, 1174.0], [3354.0, 2331.0], [3338.0, 1277.3333333333333], [3342.0, 202.0], [3330.0, 173.6], [3390.0, 70.33333333333333], [3386.0, 152.0], [3378.0, 576.0], [3382.0, 1142.3333333333335], [3370.0, 203.8], [3366.0, 484.5], [3362.0, 850.0], [3334.0, 414.5], [3558.0, 713.0], [3462.0, 834.0], [3570.0, 585.8], [3566.0, 1190.0], [3574.0, 770.7777777777778], [3578.0, 685.1428571428572], [3582.0, 237.0], [3490.0, 761.0], [3506.0, 540.0], [3458.0, 1095.0], [3538.0, 82.0], [3534.0, 72.0], [3526.0, 834.6666666666666], [3550.0, 1248.857142857143], [3590.0, 1097.4444444444443], [3594.0, 589.0], [3626.0, 96.0], [3638.0, 97.0], [3706.0, 605.0], [3826.0, 1462.0], [3762.0, 537.3333333333334], [3758.0, 531.0], [3766.0, 539.0], [3806.0, 1013.0], [3834.0, 1462.0], [3830.0, 1451.3333333333333], [3818.0, 1448.5], [3810.0, 823.0], [3858.0, 2309.0], [3954.0, 2307.0], [3950.0, 1134.0], [3922.0, 2310.0], [4054.0, 1199.4417910447764], [4026.0, 2302.0], [4002.0, 2311.0], [3994.0, 2294.0], [4086.0, 789.3333333333334], [4074.0, 1549.5], [4070.0, 2318.0], [4062.0, 1942.5], [4316.0, 173.0], [4140.0, 1496.6666666666667], [4220.0, 1072.0], [4124.0, 1808.0], [4116.0, 791.6666666666667], [4212.0, 941.1578947368421], [4196.0, 561.75], [4172.0, 2328.0], [4204.0, 1334.4], [4228.0, 124.66666666666667], [4268.0, 467.16666666666663], [4236.0, 58.666666666666664], [4332.0, 2426.6], [4300.0, 63.0], [4156.0, 1808.0], [4148.0, 1821.0], [4284.0, 2409.125], [4564.0, 1714.1666666666667], [4556.0, 915.0], [4572.0, 43.0], [4580.0, 946.0], [4588.0, 1454.0], [4596.0, 1983.0], [4548.0, 1576.5], [4516.0, 507.0], [4468.0, 165.0], [4444.0, 27.0], [4364.0, 172.0], [4476.0, 2248.0], [4404.0, 39.0], [4604.0, 506.0], [4500.0, 1748.5], [4508.0, 1021.0], [4828.0, 155.0], [4716.0, 2184.0], [4620.0, 1922.5], [4644.0, 1665.0], [4636.0, 1364.0], [4628.0, 1415.25], [5060.0, 98.0], [5004.0, 1550.0], [4988.0, 1552.5], [4980.0, 1546.0], [4892.0, 419.952380952381], [4221.0, 749.25], [4205.0, 1282.25], [4213.0, 626.0], [4197.0, 872.5], [4189.0, 1791.0], [4173.0, 2143.5], [4293.0, 17.0], [4149.0, 1821.0], [4141.0, 2318.0], [4133.0, 1817.0], [4125.0, 2320.0], [4117.0, 415.5], [4109.0, 2323.5], [4333.0, 2428.0], [4301.0, 63.0], [4237.0, 183.0], [4245.0, 1338.5], [4285.0, 2016.6666666666667], [4253.0, 2404.0], [4229.0, 183.0], [4581.0, 1712.0], [4589.0, 2228.0], [4557.0, 618.75], [4565.0, 1041.0], [4573.0, 1325.6666666666667], [4597.0, 1976.0], [4549.0, 623.75], [4365.0, 171.5], [4533.0, 162.0], [4517.0, 1874.75], [4509.0, 1024.0], [4501.0, 1028.5], [4493.0, 1026.5], [4485.0, 1027.0], [4605.0, 507.0], [4477.0, 1114.5], [4437.0, 166.0], [4645.0, 2189.0], [4613.0, 1349.0], [4877.0, 819.0], [5021.0, 105.0], [4973.0, 54.666666666666664], [4885.0, 138.6428571428571], [5189.0, 6.0], [2687.0, 607.0], [2675.0, 608.0], [2767.0, 2396.5], [2759.0, 605.0], [2715.0, 607.0], [2919.0, 548.5], [2915.0, 165.0], [2879.0, 507.0], [2875.0, 15.0], [2887.0, 526.5], [2891.0, 545.0], [2903.0, 549.0], [2907.0, 549.875], [2935.0, 547.6666666666666], [2927.0, 546.0], [2923.0, 549.0], [2975.0, 11.0], [2983.0, 21.0], [2979.0, 556.0], [2987.0, 539.0], [2991.0, 556.0], [3003.0, 550.0], [2999.0, 565.0], [3043.0, 379.3333333333333], [2963.0, 541.0], [2951.0, 544.0], [3007.0, 454.5], [3047.0, 277.54545454545456], [3051.0, 61.0], [3055.0, 452.2], [3071.0, 51.16666666666667], [3011.0, 16.0], [3015.0, 559.3333333333334], [3019.0, 556.4], [3027.0, 555.8333333333334], [3023.0, 547.5454545454545], [3031.0, 540.0], [3039.0, 481.85714285714283], [3067.0, 46.2], [3063.0, 363.25000000000006], [3059.0, 553.5], [3103.0, 348.2], [3079.0, 186.5], [3091.0, 275.5833333333333], [3135.0, 809.7142857142857], [3127.0, 967.0], [3123.0, 113.08965517241376], [3107.0, 130.0], [3115.0, 608.0], [3087.0, 225.4], [3095.0, 522.0], [3171.0, 776.1666666666666], [3175.0, 604.0], [3183.0, 49.81730769230767], [3179.0, 940.0], [3187.0, 47.0], [3199.0, 2327.0], [3147.0, 534.0], [3155.0, 102.67153284671535], [3167.0, 961.0], [3163.0, 633.8888888888889], [3159.0, 103.0], [3083.0, 85.5], [3075.0, 232.77777777777777], [3227.0, 939.0], [3215.0, 288.0], [3211.0, 780.6666666666666], [3207.0, 1207.5], [3203.0, 345.2], [3231.0, 69.0], [3243.0, 710.3333333333334], [3299.0, 154.28571428571428], [3271.0, 759.9999999999999], [3275.0, 2351.0], [3267.0, 594.0], [3327.0, 174.5], [3323.0, 199.0], [3319.0, 284.6666666666667], [3315.0, 38.5], [3303.0, 184.0], [3235.0, 941.5], [3239.0, 768.5], [3279.0, 148.4777070063694], [3295.0, 188.5], [3287.0, 33.0], [3283.0, 53.0], [3359.0, 127.0], [3335.0, 182.5], [3395.0, 73.0], [3455.0, 74.0], [3451.0, 65.0], [3431.0, 344.33333333333337], [3447.0, 797.0], [3399.0, 253.25], [3403.0, 70.66666666666667], [3415.0, 2352.0], [3347.0, 208.33333333333334], [3343.0, 144.66666666666666], [3387.0, 75.0], [3391.0, 74.0], [3383.0, 319.6666666666667], [3375.0, 1329.5], [3367.0, 694.5], [3371.0, 217.5], [3363.0, 328.5], [3331.0, 201.0], [3559.0, 85.0], [3479.0, 545.0], [3463.0, 629.5], [3555.0, 314.0], [3571.0, 752.9999999999999], [3575.0, 689.8571428571428], [3579.0, 942.0], [3583.0, 310.0], [3507.0, 539.0], [3459.0, 561.2727272727274], [3547.0, 318.0], [3527.0, 1190.5], [3551.0, 485.66666666666663], [3591.0, 310.0], [3687.0, 603.0], [3627.0, 97.0], [3647.0, 98.0], [3671.0, 601.0], [3679.0, 602.0], [3587.0, 1761.0], [3763.0, 660.0], [3767.0, 629.971153846154], [3759.0, 535.3732394366193], [3807.0, 1084.0], [3835.0, 1089.0], [3839.0, 582.0], [3827.0, 1078.0], [3815.0, 1435.0], [3871.0, 1258.0], [3891.0, 1132.0], [3915.0, 2300.0], [4003.0, 1542.3333333333333], [4007.0, 2303.0], [4079.0, 1819.0], [4063.0, 1533.375], [4055.0, 1787.0], [4238.0, 2158.0], [4222.0, 696.6], [4198.0, 709.7499999999999], [4182.0, 2327.5], [4206.0, 1495.6249999999998], [4246.0, 12.0], [4254.0, 1622.6666666666667], [4334.0, 2430.0], [4310.0, 72.5], [4294.0, 72.0], [4134.0, 1305.0], [4286.0, 2020.0], [4270.0, 849.0], [4494.0, 1586.0], [4590.0, 1801.5], [4606.0, 748.5], [4542.0, 435.6666666666667], [4534.0, 177.0], [4486.0, 1027.0], [4510.0, 1426.6666666666667], [4518.0, 506.0], [4478.0, 1700.75], [4406.0, 1905.2], [4550.0, 72.0], [4414.0, 38.0], [4566.0, 1463.5], [4574.0, 1716.0], [4582.0, 2230.5], [4598.0, 953.0], [4758.0, 2183.0], [4654.0, 157.0], [4646.0, 1595.142857142857], [4622.0, 2001.6666666666667], [4614.0, 356.33333333333337], [5094.0, 135.0], [4886.0, 140.25], [4878.0, 141.0], [4982.0, 1549.0], [4966.0, 374.6666666666667], [5006.0, 550.0], [4319.0, 1161.0], [4191.0, 1059.6666666666667], [4183.0, 1060.5], [4175.0, 1564.0], [4167.0, 796.0], [4199.0, 942.9], [4223.0, 684.1666666666666], [4103.0, 2320.0], [4247.0, 180.0], [4343.0, 2432.0], [4311.0, 72.0], [4151.0, 1640.3333333333333], [4287.0, 2348.0], [4279.0, 60.5], [4271.0, 70.0], [4255.0, 840.0], [4583.0, 2476.0], [4551.0, 73.5], [4479.0, 1028.0], [4375.0, 2433.0], [4423.0, 2446.0], [4591.0, 1776.0], [4575.0, 1972.0], [4567.0, 1969.5], [4559.0, 62.699999999999996], [4535.0, 2204.0], [4519.0, 506.0], [4511.0, 1746.5], [4503.0, 1025.0], [4543.0, 980.25], [4495.0, 596.0], [4607.0, 1626.5], [4599.0, 683.3333333333334], [4623.0, 2579.0], [4655.0, 2058.0], [4847.0, 69.0], [4839.0, 1093.0], [4751.0, 2057.0], [4719.0, 2184.0], [4687.0, 156.0], [4615.0, 1332.0], [4639.0, 1839.0], [4647.0, 998.2604651162796], [5079.0, 132.0], [5007.0, 1039.6402116402137], [4999.0, 1118.7142857142856], [4991.0, 531.0], [4983.0, 52.0], [4887.0, 152.0], [5255.0, 241.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[3584.779200000002, 905.2005000000008]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 5416.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 23000.0, "minX": 1.76082102E12, "maxY": 30166.666666666668, "series": [{"data": [[1.76082102E12, 30166.666666666668]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.76082102E12, 23000.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.76082102E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 905.2005000000008, "minX": 1.76082102E12, "maxY": 905.2005000000008, "series": [{"data": [[1.76082102E12, 905.2005000000008]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.76082102E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 904.3729999999996, "minX": 1.76082102E12, "maxY": 904.3729999999996, "series": [{"data": [[1.76082102E12, 904.3729999999996]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.76082102E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 800.9532999999998, "minX": 1.76082102E12, "maxY": 800.9532999999998, "series": [{"data": [[1.76082102E12, 800.9532999999998]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.76082102E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.76082102E12, "maxY": 2690.0, "series": [{"data": [[1.76082102E12, 2690.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.76082102E12, 2080.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.76082102E12, 2451.9699999999993]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.76082102E12, 2228.949999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.76082102E12, 3.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.76082102E12, 648.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.76082102E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 90.0, "minX": 65.0, "maxY": 2033.0, "series": [{"data": [[65.0, 2033.0], [2296.0, 1571.0], [2748.0, 560.0], [1568.0, 90.0], [3323.0, 1013.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3323.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 90.0, "minX": 65.0, "maxY": 2033.0, "series": [{"data": [[65.0, 2033.0], [2296.0, 1571.0], [2748.0, 559.5], [1568.0, 90.0], [3323.0, 989.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3323.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.76082102E12, "maxY": 166.66666666666666, "series": [{"data": [[1.76082102E12, 166.66666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.76082102E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.76082102E12, "maxY": 166.66666666666666, "series": [{"data": [[1.76082102E12, 166.66666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.76082102E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.76082102E12, "maxY": 166.66666666666666, "series": [{"data": [[1.76082102E12, 166.66666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.76082102E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.76082102E12, "maxY": 166.66666666666666, "series": [{"data": [[1.76082102E12, 166.66666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.76082102E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

