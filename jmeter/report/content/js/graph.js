/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 3042.0, "series": [{"data": [[0.0, 1.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 2.0], [1.3, 2.0], [1.4, 2.0], [1.5, 2.0], [1.6, 2.0], [1.7, 2.0], [1.8, 2.0], [1.9, 2.0], [2.0, 2.0], [2.1, 2.0], [2.2, 2.0], [2.3, 2.0], [2.4, 2.0], [2.5, 2.0], [2.6, 2.0], [2.7, 2.0], [2.8, 2.0], [2.9, 2.0], [3.0, 2.0], [3.1, 2.0], [3.2, 2.0], [3.3, 2.0], [3.4, 2.0], [3.5, 2.0], [3.6, 2.0], [3.7, 2.0], [3.8, 2.0], [3.9, 2.0], [4.0, 2.0], [4.1, 2.0], [4.2, 2.0], [4.3, 2.0], [4.4, 2.0], [4.5, 2.0], [4.6, 2.0], [4.7, 2.0], [4.8, 2.0], [4.9, 2.0], [5.0, 2.0], [5.1, 2.0], [5.2, 2.0], [5.3, 2.0], [5.4, 2.0], [5.5, 2.0], [5.6, 3.0], [5.7, 3.0], [5.8, 3.0], [5.9, 3.0], [6.0, 3.0], [6.1, 3.0], [6.2, 3.0], [6.3, 3.0], [6.4, 3.0], [6.5, 3.0], [6.6, 3.0], [6.7, 3.0], [6.8, 3.0], [6.9, 3.0], [7.0, 3.0], [7.1, 3.0], [7.2, 3.0], [7.3, 3.0], [7.4, 3.0], [7.5, 3.0], [7.6, 3.0], [7.7, 3.0], [7.8, 3.0], [7.9, 3.0], [8.0, 3.0], [8.1, 3.0], [8.2, 3.0], [8.3, 3.0], [8.4, 3.0], [8.5, 3.0], [8.6, 3.0], [8.7, 3.0], [8.8, 3.0], [8.9, 3.0], [9.0, 3.0], [9.1, 3.0], [9.2, 3.0], [9.3, 3.0], [9.4, 3.0], [9.5, 3.0], [9.6, 3.0], [9.7, 3.0], [9.8, 3.0], [9.9, 3.0], [10.0, 3.0], [10.1, 3.0], [10.2, 3.0], [10.3, 3.0], [10.4, 3.0], [10.5, 3.0], [10.6, 3.0], [10.7, 3.0], [10.8, 3.0], [10.9, 3.0], [11.0, 3.0], [11.1, 3.0], [11.2, 3.0], [11.3, 4.0], [11.4, 4.0], [11.5, 4.0], [11.6, 4.0], [11.7, 4.0], [11.8, 4.0], [11.9, 4.0], [12.0, 4.0], [12.1, 4.0], [12.2, 4.0], [12.3, 4.0], [12.4, 4.0], [12.5, 4.0], [12.6, 4.0], [12.7, 4.0], [12.8, 4.0], [12.9, 4.0], [13.0, 4.0], [13.1, 4.0], [13.2, 4.0], [13.3, 4.0], [13.4, 4.0], [13.5, 4.0], [13.6, 4.0], [13.7, 4.0], [13.8, 4.0], [13.9, 4.0], [14.0, 4.0], [14.1, 4.0], [14.2, 4.0], [14.3, 4.0], [14.4, 4.0], [14.5, 4.0], [14.6, 4.0], [14.7, 4.0], [14.8, 4.0], [14.9, 4.0], [15.0, 4.0], [15.1, 4.0], [15.2, 4.0], [15.3, 4.0], [15.4, 4.0], [15.5, 4.0], [15.6, 5.0], [15.7, 5.0], [15.8, 5.0], [15.9, 5.0], [16.0, 5.0], [16.1, 5.0], [16.2, 5.0], [16.3, 5.0], [16.4, 5.0], [16.5, 5.0], [16.6, 5.0], [16.7, 5.0], [16.8, 5.0], [16.9, 5.0], [17.0, 5.0], [17.1, 5.0], [17.2, 5.0], [17.3, 5.0], [17.4, 5.0], [17.5, 5.0], [17.6, 5.0], [17.7, 5.0], [17.8, 5.0], [17.9, 5.0], [18.0, 5.0], [18.1, 5.0], [18.2, 5.0], [18.3, 5.0], [18.4, 5.0], [18.5, 5.0], [18.6, 5.0], [18.7, 5.0], [18.8, 6.0], [18.9, 6.0], [19.0, 6.0], [19.1, 6.0], [19.2, 6.0], [19.3, 6.0], [19.4, 6.0], [19.5, 6.0], [19.6, 6.0], [19.7, 6.0], [19.8, 6.0], [19.9, 6.0], [20.0, 6.0], [20.1, 6.0], [20.2, 6.0], [20.3, 6.0], [20.4, 6.0], [20.5, 6.0], [20.6, 6.0], [20.7, 6.0], [20.8, 6.0], [20.9, 6.0], [21.0, 6.0], [21.1, 6.0], [21.2, 6.0], [21.3, 6.0], [21.4, 6.0], [21.5, 6.0], [21.6, 6.0], [21.7, 7.0], [21.8, 7.0], [21.9, 7.0], [22.0, 7.0], [22.1, 7.0], [22.2, 7.0], [22.3, 7.0], [22.4, 7.0], [22.5, 7.0], [22.6, 7.0], [22.7, 7.0], [22.8, 7.0], [22.9, 7.0], [23.0, 7.0], [23.1, 7.0], [23.2, 7.0], [23.3, 7.0], [23.4, 7.0], [23.5, 7.0], [23.6, 7.0], [23.7, 7.0], [23.8, 7.0], [23.9, 8.0], [24.0, 8.0], [24.1, 8.0], [24.2, 8.0], [24.3, 8.0], [24.4, 8.0], [24.5, 8.0], [24.6, 8.0], [24.7, 8.0], [24.8, 8.0], [24.9, 8.0], [25.0, 8.0], [25.1, 8.0], [25.2, 8.0], [25.3, 8.0], [25.4, 8.0], [25.5, 8.0], [25.6, 8.0], [25.7, 8.0], [25.8, 8.0], [25.9, 8.0], [26.0, 8.0], [26.1, 9.0], [26.2, 9.0], [26.3, 9.0], [26.4, 9.0], [26.5, 9.0], [26.6, 9.0], [26.7, 9.0], [26.8, 9.0], [26.9, 9.0], [27.0, 9.0], [27.1, 9.0], [27.2, 9.0], [27.3, 9.0], [27.4, 9.0], [27.5, 9.0], [27.6, 9.0], [27.7, 9.0], [27.8, 10.0], [27.9, 10.0], [28.0, 10.0], [28.1, 10.0], [28.2, 10.0], [28.3, 10.0], [28.4, 10.0], [28.5, 10.0], [28.6, 10.0], [28.7, 10.0], [28.8, 10.0], [28.9, 10.0], [29.0, 10.0], [29.1, 10.0], [29.2, 10.0], [29.3, 11.0], [29.4, 11.0], [29.5, 11.0], [29.6, 11.0], [29.7, 11.0], [29.8, 11.0], [29.9, 11.0], [30.0, 11.0], [30.1, 11.0], [30.2, 11.0], [30.3, 12.0], [30.4, 12.0], [30.5, 12.0], [30.6, 12.0], [30.7, 12.0], [30.8, 12.0], [30.9, 12.0], [31.0, 12.0], [31.1, 12.0], [31.2, 12.0], [31.3, 13.0], [31.4, 13.0], [31.5, 13.0], [31.6, 13.0], [31.7, 13.0], [31.8, 13.0], [31.9, 13.0], [32.0, 13.0], [32.1, 14.0], [32.2, 14.0], [32.3, 14.0], [32.4, 14.0], [32.5, 14.0], [32.6, 14.0], [32.7, 14.0], [32.8, 14.0], [32.9, 14.0], [33.0, 14.0], [33.1, 15.0], [33.2, 15.0], [33.3, 15.0], [33.4, 15.0], [33.5, 15.0], [33.6, 15.0], [33.7, 15.0], [33.8, 15.0], [33.9, 15.0], [34.0, 15.0], [34.1, 16.0], [34.2, 16.0], [34.3, 16.0], [34.4, 16.0], [34.5, 16.0], [34.6, 16.0], [34.7, 16.0], [34.8, 16.0], [34.9, 16.0], [35.0, 16.0], [35.1, 16.0], [35.2, 17.0], [35.3, 17.0], [35.4, 17.0], [35.5, 17.0], [35.6, 17.0], [35.7, 17.0], [35.8, 17.0], [35.9, 17.0], [36.0, 18.0], [36.1, 18.0], [36.2, 18.0], [36.3, 18.0], [36.4, 18.0], [36.5, 18.0], [36.6, 18.0], [36.7, 19.0], [36.8, 19.0], [36.9, 19.0], [37.0, 19.0], [37.1, 19.0], [37.2, 19.0], [37.3, 19.0], [37.4, 20.0], [37.5, 20.0], [37.6, 20.0], [37.7, 20.0], [37.8, 20.0], [37.9, 20.0], [38.0, 21.0], [38.1, 21.0], [38.2, 21.0], [38.3, 21.0], [38.4, 21.0], [38.5, 21.0], [38.6, 22.0], [38.7, 22.0], [38.8, 22.0], [38.9, 22.0], [39.0, 22.0], [39.1, 22.0], [39.2, 23.0], [39.3, 23.0], [39.4, 23.0], [39.5, 23.0], [39.6, 23.0], [39.7, 23.0], [39.8, 23.0], [39.9, 24.0], [40.0, 24.0], [40.1, 24.0], [40.2, 24.0], [40.3, 24.0], [40.4, 24.0], [40.5, 24.0], [40.6, 24.0], [40.7, 24.0], [40.8, 24.0], [40.9, 24.0], [41.0, 25.0], [41.1, 25.0], [41.2, 25.0], [41.3, 25.0], [41.4, 25.0], [41.5, 25.0], [41.6, 25.0], [41.7, 25.0], [41.8, 26.0], [41.9, 26.0], [42.0, 26.0], [42.1, 26.0], [42.2, 26.0], [42.3, 26.0], [42.4, 26.0], [42.5, 26.0], [42.6, 26.0], [42.7, 27.0], [42.8, 27.0], [42.9, 27.0], [43.0, 27.0], [43.1, 27.0], [43.2, 27.0], [43.3, 27.0], [43.4, 28.0], [43.5, 28.0], [43.6, 28.0], [43.7, 28.0], [43.8, 28.0], [43.9, 28.0], [44.0, 28.0], [44.1, 28.0], [44.2, 28.0], [44.3, 29.0], [44.4, 29.0], [44.5, 29.0], [44.6, 29.0], [44.7, 29.0], [44.8, 29.0], [44.9, 29.0], [45.0, 29.0], [45.1, 29.0], [45.2, 30.0], [45.3, 30.0], [45.4, 30.0], [45.5, 30.0], [45.6, 30.0], [45.7, 30.0], [45.8, 30.0], [45.9, 30.0], [46.0, 31.0], [46.1, 31.0], [46.2, 31.0], [46.3, 31.0], [46.4, 31.0], [46.5, 32.0], [46.6, 32.0], [46.7, 32.0], [46.8, 32.0], [46.9, 32.0], [47.0, 32.0], [47.1, 32.0], [47.2, 33.0], [47.3, 33.0], [47.4, 33.0], [47.5, 33.0], [47.6, 33.0], [47.7, 33.0], [47.8, 33.0], [47.9, 33.0], [48.0, 33.0], [48.1, 34.0], [48.2, 34.0], [48.3, 34.0], [48.4, 34.0], [48.5, 34.0], [48.6, 34.0], [48.7, 34.0], [48.8, 34.0], [48.9, 35.0], [49.0, 35.0], [49.1, 35.0], [49.2, 35.0], [49.3, 35.0], [49.4, 36.0], [49.5, 36.0], [49.6, 36.0], [49.7, 36.0], [49.8, 36.0], [49.9, 36.0], [50.0, 37.0], [50.1, 37.0], [50.2, 37.0], [50.3, 37.0], [50.4, 37.0], [50.5, 38.0], [50.6, 38.0], [50.7, 38.0], [50.8, 38.0], [50.9, 39.0], [51.0, 39.0], [51.1, 39.0], [51.2, 39.0], [51.3, 39.0], [51.4, 40.0], [51.5, 40.0], [51.6, 40.0], [51.7, 40.0], [51.8, 40.0], [51.9, 41.0], [52.0, 41.0], [52.1, 41.0], [52.2, 41.0], [52.3, 42.0], [52.4, 43.0], [52.5, 43.0], [52.6, 43.0], [52.7, 44.0], [52.8, 45.0], [52.9, 45.0], [53.0, 45.0], [53.1, 46.0], [53.2, 46.0], [53.3, 46.0], [53.4, 46.0], [53.5, 46.0], [53.6, 47.0], [53.7, 47.0], [53.8, 47.0], [53.9, 47.0], [54.0, 47.0], [54.1, 48.0], [54.2, 48.0], [54.3, 48.0], [54.4, 48.0], [54.5, 48.0], [54.6, 49.0], [54.7, 49.0], [54.8, 49.0], [54.9, 49.0], [55.0, 50.0], [55.1, 50.0], [55.2, 50.0], [55.3, 50.0], [55.4, 50.0], [55.5, 50.0], [55.6, 50.0], [55.7, 51.0], [55.8, 51.0], [55.9, 51.0], [56.0, 51.0], [56.1, 51.0], [56.2, 51.0], [56.3, 51.0], [56.4, 52.0], [56.5, 52.0], [56.6, 52.0], [56.7, 52.0], [56.8, 52.0], [56.9, 52.0], [57.0, 52.0], [57.1, 52.0], [57.2, 53.0], [57.3, 53.0], [57.4, 53.0], [57.5, 53.0], [57.6, 53.0], [57.7, 54.0], [57.8, 54.0], [57.9, 54.0], [58.0, 54.0], [58.1, 55.0], [58.2, 55.0], [58.3, 55.0], [58.4, 56.0], [58.5, 56.0], [58.6, 56.0], [58.7, 57.0], [58.8, 57.0], [58.9, 58.0], [59.0, 58.0], [59.1, 58.0], [59.2, 58.0], [59.3, 59.0], [59.4, 59.0], [59.5, 59.0], [59.6, 60.0], [59.7, 60.0], [59.8, 60.0], [59.9, 60.0], [60.0, 60.0], [60.1, 60.0], [60.2, 61.0], [60.3, 61.0], [60.4, 61.0], [60.5, 61.0], [60.6, 61.0], [60.7, 61.0], [60.8, 62.0], [60.9, 62.0], [61.0, 62.0], [61.1, 62.0], [61.2, 62.0], [61.3, 62.0], [61.4, 63.0], [61.5, 63.0], [61.6, 63.0], [61.7, 63.0], [61.8, 64.0], [61.9, 64.0], [62.0, 64.0], [62.1, 64.0], [62.2, 64.0], [62.3, 65.0], [62.4, 65.0], [62.5, 65.0], [62.6, 65.0], [62.7, 65.0], [62.8, 65.0], [62.9, 65.0], [63.0, 65.0], [63.1, 66.0], [63.2, 66.0], [63.3, 66.0], [63.4, 66.0], [63.5, 66.0], [63.6, 66.0], [63.7, 66.0], [63.8, 67.0], [63.9, 67.0], [64.0, 67.0], [64.1, 67.0], [64.2, 67.0], [64.3, 67.0], [64.4, 67.0], [64.5, 67.0], [64.6, 67.0], [64.7, 67.0], [64.8, 67.0], [64.9, 68.0], [65.0, 68.0], [65.1, 68.0], [65.2, 68.0], [65.3, 68.0], [65.4, 68.0], [65.5, 68.0], [65.6, 68.0], [65.7, 68.0], [65.8, 69.0], [65.9, 69.0], [66.0, 69.0], [66.1, 69.0], [66.2, 69.0], [66.3, 69.0], [66.4, 69.0], [66.5, 69.0], [66.6, 69.0], [66.7, 69.0], [66.8, 70.0], [66.9, 70.0], [67.0, 70.0], [67.1, 70.0], [67.2, 70.0], [67.3, 70.0], [67.4, 70.0], [67.5, 71.0], [67.6, 71.0], [67.7, 71.0], [67.8, 71.0], [67.9, 71.0], [68.0, 71.0], [68.1, 71.0], [68.2, 71.0], [68.3, 72.0], [68.4, 72.0], [68.5, 72.0], [68.6, 72.0], [68.7, 72.0], [68.8, 72.0], [68.9, 72.0], [69.0, 73.0], [69.1, 73.0], [69.2, 73.0], [69.3, 74.0], [69.4, 74.0], [69.5, 74.0], [69.6, 74.0], [69.7, 75.0], [69.8, 75.0], [69.9, 75.0], [70.0, 75.0], [70.1, 75.0], [70.2, 76.0], [70.3, 76.0], [70.4, 76.0], [70.5, 77.0], [70.6, 77.0], [70.7, 77.0], [70.8, 77.0], [70.9, 78.0], [71.0, 78.0], [71.1, 78.0], [71.2, 79.0], [71.3, 79.0], [71.4, 80.0], [71.5, 80.0], [71.6, 81.0], [71.7, 81.0], [71.8, 81.0], [71.9, 82.0], [72.0, 82.0], [72.1, 83.0], [72.2, 84.0], [72.3, 84.0], [72.4, 85.0], [72.5, 86.0], [72.6, 87.0], [72.7, 87.0], [72.8, 88.0], [72.9, 89.0], [73.0, 90.0], [73.1, 90.0], [73.2, 91.0], [73.3, 91.0], [73.4, 92.0], [73.5, 92.0], [73.6, 93.0], [73.7, 93.0], [73.8, 93.0], [73.9, 94.0], [74.0, 94.0], [74.1, 94.0], [74.2, 95.0], [74.3, 95.0], [74.4, 96.0], [74.5, 96.0], [74.6, 96.0], [74.7, 96.0], [74.8, 96.0], [74.9, 97.0], [75.0, 97.0], [75.1, 97.0], [75.2, 97.0], [75.3, 97.0], [75.4, 98.0], [75.5, 98.0], [75.6, 98.0], [75.7, 98.0], [75.8, 98.0], [75.9, 99.0], [76.0, 99.0], [76.1, 99.0], [76.2, 100.0], [76.3, 100.0], [76.4, 100.0], [76.5, 101.0], [76.6, 101.0], [76.7, 101.0], [76.8, 102.0], [76.9, 102.0], [77.0, 102.0], [77.1, 102.0], [77.2, 103.0], [77.3, 103.0], [77.4, 103.0], [77.5, 103.0], [77.6, 103.0], [77.7, 103.0], [77.8, 104.0], [77.9, 104.0], [78.0, 104.0], [78.1, 104.0], [78.2, 104.0], [78.3, 104.0], [78.4, 104.0], [78.5, 105.0], [78.6, 105.0], [78.7, 105.0], [78.8, 105.0], [78.9, 105.0], [79.0, 105.0], [79.1, 106.0], [79.2, 106.0], [79.3, 106.0], [79.4, 106.0], [79.5, 107.0], [79.6, 107.0], [79.7, 108.0], [79.8, 108.0], [79.9, 109.0], [80.0, 109.0], [80.1, 109.0], [80.2, 110.0], [80.3, 110.0], [80.4, 111.0], [80.5, 111.0], [80.6, 112.0], [80.7, 113.0], [80.8, 113.0], [80.9, 114.0], [81.0, 114.0], [81.1, 115.0], [81.2, 116.0], [81.3, 119.0], [81.4, 121.0], [81.5, 124.0], [81.6, 132.0], [81.7, 134.0], [81.8, 135.0], [81.9, 137.0], [82.0, 137.0], [82.1, 139.0], [82.2, 139.0], [82.3, 141.0], [82.4, 142.0], [82.5, 145.0], [82.6, 147.0], [82.7, 150.0], [82.8, 159.0], [82.9, 202.0], [83.0, 202.0], [83.1, 215.0], [83.2, 231.0], [83.3, 240.0], [83.4, 246.0], [83.5, 246.0], [83.6, 247.0], [83.7, 247.0], [83.8, 248.0], [83.9, 249.0], [84.0, 250.0], [84.1, 251.0], [84.2, 252.0], [84.3, 253.0], [84.4, 255.0], [84.5, 257.0], [84.6, 263.0], [84.7, 266.0], [84.8, 268.0], [84.9, 268.0], [85.0, 269.0], [85.1, 269.0], [85.2, 269.0], [85.3, 270.0], [85.4, 270.0], [85.5, 270.0], [85.6, 270.0], [85.7, 271.0], [85.8, 271.0], [85.9, 271.0], [86.0, 272.0], [86.1, 273.0], [86.2, 274.0], [86.3, 274.0], [86.4, 275.0], [86.5, 275.0], [86.6, 275.0], [86.7, 276.0], [86.8, 276.0], [86.9, 277.0], [87.0, 277.0], [87.1, 278.0], [87.2, 279.0], [87.3, 280.0], [87.4, 280.0], [87.5, 281.0], [87.6, 282.0], [87.7, 284.0], [87.8, 289.0], [87.9, 292.0], [88.0, 299.0], [88.1, 1000.0], [88.2, 1000.0], [88.3, 1001.0], [88.4, 1001.0], [88.5, 1001.0], [88.6, 1001.0], [88.7, 1001.0], [88.8, 1001.0], [88.9, 1001.0], [89.0, 1001.0], [89.1, 1001.0], [89.2, 1001.0], [89.3, 1001.0], [89.4, 1001.0], [89.5, 1001.0], [89.6, 1001.0], [89.7, 1001.0], [89.8, 1001.0], [89.9, 1001.0], [90.0, 1001.0], [90.1, 1001.0], [90.2, 1001.0], [90.3, 1001.0], [90.4, 1001.0], [90.5, 1001.0], [90.6, 1001.0], [90.7, 1001.0], [90.8, 1001.0], [90.9, 1001.0], [91.0, 1001.0], [91.1, 1001.0], [91.2, 1001.0], [91.3, 1001.0], [91.4, 1001.0], [91.5, 1001.0], [91.6, 1001.0], [91.7, 1001.0], [91.8, 1001.0], [91.9, 1001.0], [92.0, 1001.0], [92.1, 1001.0], [92.2, 1001.0], [92.3, 1001.0], [92.4, 1001.0], [92.5, 1001.0], [92.6, 1001.0], [92.7, 1001.0], [92.8, 1002.0], [92.9, 1002.0], [93.0, 1002.0], [93.1, 1002.0], [93.2, 1002.0], [93.3, 1002.0], [93.4, 1002.0], [93.5, 1002.0], [93.6, 1002.0], [93.7, 1002.0], [93.8, 1002.0], [93.9, 1002.0], [94.0, 1002.0], [94.1, 1002.0], [94.2, 1002.0], [94.3, 1002.0], [94.4, 1002.0], [94.5, 1002.0], [94.6, 1002.0], [94.7, 1002.0], [94.8, 1002.0], [94.9, 1002.0], [95.0, 1002.0], [95.1, 1002.0], [95.2, 1002.0], [95.3, 1002.0], [95.4, 1002.0], [95.5, 1002.0], [95.6, 1002.0], [95.7, 1002.0], [95.8, 1002.0], [95.9, 1002.0], [96.0, 1002.0], [96.1, 1002.0], [96.2, 1002.0], [96.3, 1002.0], [96.4, 1002.0], [96.5, 1002.0], [96.6, 1002.0], [96.7, 1002.0], [96.8, 1002.0], [96.9, 1003.0], [97.0, 1003.0], [97.1, 1003.0], [97.2, 1003.0], [97.3, 1003.0], [97.4, 1003.0], [97.5, 1003.0], [97.6, 1004.0], [97.7, 1004.0], [97.8, 1007.0], [97.9, 1011.0], [98.0, 1018.0], [98.1, 1102.0], [98.2, 1106.0], [98.3, 1107.0], [98.4, 1108.0], [98.5, 1138.0], [98.6, 1140.0], [98.7, 1143.0], [98.8, 1144.0], [98.9, 3001.0], [99.0, 3001.0], [99.1, 3001.0], [99.2, 3002.0], [99.3, 3002.0], [99.4, 3002.0], [99.5, 3002.0], [99.6, 3002.0], [99.7, 3003.0], [99.8, 3004.0], [99.9, 3038.0], [100.0, 3042.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 7614.0, "series": [{"data": [[0.0, 7614.0], [1100.0, 86.0], [300.0, 1.0], [600.0, 3.0], [1400.0, 1.0], [3000.0, 112.0], [100.0, 669.0], [200.0, 517.0], [1000.0, 997.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 112.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 8801.0, "series": [{"data": [[0.0, 8801.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1087.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 112.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 726.980799999998, "minX": 1.76070762E12, "maxY": 726.980799999998, "series": [{"data": [[1.76070762E12, 726.980799999998]], "isOverall": false, "label": "Users Request", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.76070762E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2.2407407407407414, "minX": 1.0, "maxY": 3041.5, "series": [{"data": [[2.0, 3002.0], [3.0, 3001.0], [4.0, 3002.0], [5.0, 3002.0], [7.0, 3002.0], [8.0, 3001.0], [10.0, 3001.0], [11.0, 3001.5], [12.0, 3002.0], [13.0, 3002.0], [14.0, 3002.0], [15.0, 3002.0], [16.0, 3002.0], [18.0, 3001.0], [19.0, 3001.0], [20.0, 3001.0], [21.0, 3002.0], [22.0, 3002.0], [23.0, 3002.0], [24.0, 3001.0], [26.0, 3001.0], [27.0, 3001.0], [28.0, 3001.0], [30.0, 3001.5], [33.0, 3002.0], [37.0, 3001.0], [36.0, 3001.0], [39.0, 3002.0], [41.0, 3001.0], [40.0, 3001.0], [43.0, 3002.0], [42.0, 3002.0], [45.0, 3001.0], [44.0, 3000.0], [47.0, 3001.0], [46.0, 3001.0], [49.0, 3001.0], [48.0, 3001.0], [51.0, 3001.0], [50.0, 3001.0], [53.0, 3002.0], [55.0, 3002.0], [57.0, 3002.0], [56.0, 3002.0], [59.0, 3002.0], [58.0, 3002.0], [60.0, 3002.0], [62.0, 3002.0], [66.0, 3002.0], [65.0, 3002.0], [64.0, 3001.0], [71.0, 3004.5], [69.0, 3003.0], [74.0, 3004.0], [73.0, 3003.0], [79.0, 3002.0], [78.0, 3004.0], [76.0, 3001.5], [83.0, 3004.0], [82.0, 3003.5], [81.0, 3004.0], [87.0, 3002.0], [86.0, 3002.0], [85.0, 3002.0], [91.0, 3003.0], [89.0, 3003.0], [94.0, 3002.0], [99.0, 3021.5], [97.0, 3041.0], [96.0, 3041.5], [102.0, 3038.0], [107.0, 3039.3333333333335], [106.0, 3040.0], [105.0, 3038.0], [104.0, 3021.0], [112.0, 3004.2], [118.0, 1002.0], [117.0, 1002.0], [123.0, 1012.0], [122.0, 1011.0], [121.0, 1012.0], [127.0, 1007.0], [126.0, 1009.0], [125.0, 1010.0], [124.0, 1010.0], [135.0, 1001.0], [134.0, 1001.6666666666666], [131.0, 1002.0], [130.0, 1005.0], [129.0, 1006.0], [128.0, 1006.0], [143.0, 1001.0], [142.0, 1001.0], [141.0, 1001.0], [140.0, 1002.0], [139.0, 1001.0], [138.0, 1001.0], [137.0, 1001.5], [151.0, 1002.0], [150.0, 1002.0], [149.0, 1002.0], [147.0, 1001.0], [145.0, 1001.0], [144.0, 1001.0], [159.0, 1002.0], [158.0, 1002.0], [156.0, 1001.0], [155.0, 1001.0], [154.0, 1001.0], [153.0, 1001.0], [152.0, 1001.0], [166.0, 1001.5], [161.0, 1001.0], [160.0, 1001.0], [171.0, 437.42857142857144], [172.0, 13.5], [169.0, 14.142857142857142], [168.0, 260.25], [170.0, 15.0], [175.0, 342.6666666666667], [174.0, 1002.0], [173.0, 1001.5], [182.0, 98.99999999999999], [183.0, 264.25], [181.0, 139.625], [180.0, 14.666666666666666], [177.0, 297.0], [179.0, 138.5], [176.0, 14.636363636363637], [178.0, 508.5], [189.0, 94.92307692307693], [188.0, 117.6], [187.0, 610.0], [186.0, 412.4], [184.0, 20.0], [185.0, 19.42857142857143], [191.0, 262.5], [198.0, 37.0], [199.0, 36.0], [196.0, 271.5], [197.0, 23.5], [195.0, 185.11111111111111], [193.0, 16.5], [192.0, 17.0], [207.0, 519.5], [206.0, 172.85714285714286], [201.0, 34.0], [200.0, 38.0], [213.0, 40.225806451612904], [210.0, 195.58333333333331], [209.0, 195.0], [208.0, 33.0], [212.0, 12.0], [214.0, 7.146341463414633], [211.0, 267.25], [215.0, 29.901408450704224], [223.0, 3.325], [222.0, 14.976744186046512], [221.0, 83.18666666666667], [219.0, 29.857142857142854], [217.0, 31.422535211267604], [216.0, 54.934210526315795], [220.0, 2.388059701492537], [218.0, 2.2407407407407414], [231.0, 5.096774193548388], [226.0, 39.43859649122807], [224.0, 16.28048780487805], [230.0, 4.212765957446808], [227.0, 16.44871794871795], [225.0, 16.608108108108105], [228.0, 24.645833333333332], [229.0, 25.148936170212767], [238.0, 21.421052631578952], [237.0, 6.500000000000001], [236.0, 142.36363636363637], [233.0, 6.8999999999999995], [232.0, 58.368421052631575], [239.0, 6.318181818181818], [235.0, 80.72413793103448], [234.0, 4.999999999999999], [245.0, 14.666666666666666], [244.0, 9.692307692307692], [243.0, 8.2], [242.0, 152.71428571428572], [241.0, 36.25], [247.0, 670.6666666666666], [246.0, 7.0], [240.0, 21.0], [254.0, 10.714285714285714], [253.0, 10.0], [252.0, 509.0], [251.0, 11.187499999999998], [255.0, 342.3333333333333], [250.0, 42.83333333333333], [249.0, 207.3], [248.0, 6.666666666666667], [269.0, 36.0], [268.0, 808.0], [259.0, 12.0], [267.0, 19.666666666666668], [266.0, 12.0], [264.0, 5.0], [265.0, 802.8], [260.0, 612.0], [263.0, 206.6], [262.0, 7.0], [261.0, 408.4], [258.0, 20.0], [257.0, 182.66666666666669], [256.0, 21.0], [271.0, 35.0], [270.0, 14.4], [286.0, 138.55555555555554], [287.0, 48.42857142857142], [285.0, 226.0], [284.0, 355.0], [283.0, 154.125], [282.0, 676.3333333333334], [281.0, 516.5], [280.0, 33.5], [279.0, 154.875], [272.0, 34.0], [275.0, 34.5], [274.0, 33.0], [273.0, 33.27272727272727], [278.0, 174.28571428571428], [277.0, 703.7692307692307], [276.0, 40.0], [291.0, 31.0], [303.0, 568.5], [302.0, 574.0], [301.0, 681.6666666666666], [300.0, 35.666666666666664], [299.0, 357.5], [296.0, 171.125], [297.0, 516.0], [298.0, 519.0], [294.0, 441.09999999999997], [292.0, 514.5], [289.0, 30.0], [290.0, 274.625], [288.0, 141.0], [295.0, 1002.0], [319.0, 104.70588235294119], [318.0, 347.6666666666667], [315.0, 41.75], [314.0, 350.3333333333333], [312.0, 437.75], [313.0, 104.71428571428572], [311.0, 35.090909090909086], [310.0, 35.875], [309.0, 348.6666666666667], [308.0, 32.333333333333336], [304.0, 304.0], [306.0, 309.7142857142857], [316.0, 672.0], [305.0, 35.0], [317.0, 123.54545454545455], [334.0, 510.75], [335.0, 17.666666666666668], [333.0, 102.2], [332.0, 345.6666666666667], [323.0, 245.0769230769231], [322.0, 117.99999999999999], [321.0, 21.333333333333332], [320.0, 31.000000000000004], [331.0, 198.22222222222223], [330.0, 242.0], [329.0, 182.66666666666669], [328.0, 346.3333333333333], [327.0, 159.71428571428572], [326.0, 543.75], [325.0, 70.0], [324.0, 158.25], [350.0, 58.53846153846153], [351.0, 41.12903225806451], [348.0, 68.48484848484848], [349.0, 3.266666666666667], [339.0, 3.0], [338.0, 287.7142857142857], [347.0, 8.151515151515152], [346.0, 59.31034482758621], [343.0, 23.28571428571429], [336.0, 1001.5], [337.0, 151.0], [340.0, 190.63636363636363], [341.0, 127.75], [342.0, 2.6666666666666665], [345.0, 58.333333333333336], [344.0, 178.8235294117647], [365.0, 321.0], [364.0, 147.4375], [355.0, 91.84615384615384], [354.0, 140.1304347826087], [353.0, 5.052631578947367], [352.0, 17.857142857142858], [367.0, 30.375000000000004], [366.0, 176.77777777777777], [362.0, 138.375], [363.0, 9.2], [359.0, 78.96296296296296], [358.0, 89.78947368421052], [357.0, 120.66666666666667], [356.0, 169.0], [360.0, 260.6], [361.0, 89.6923076923077], [369.0, 471.0], [380.0, 562.5], [383.0, 506.0], [381.0, 1001.0], [368.0, 22.0], [371.0, 211.2], [370.0, 345.3333333333333], [372.0, 259.25], [374.0, 15.0], [373.0, 17.0], [375.0, 436.85714285714283], [378.0, 19.0], [379.0, 1001.6666666666666], [376.0, 153.28571428571428], [397.0, 199.0909090909091], [399.0, 359.5], [398.0, 7.0], [396.0, 41.25], [395.0, 332.35714285714283], [394.0, 36.92857142857142], [393.0, 36.5], [392.0, 34.25], [388.0, 452.57142857142856], [390.0, 19.0], [391.0, 1001.5], [389.0, 181.33333333333334], [385.0, 82.0], [386.0, 18.0], [384.0, 286.0], [387.0, 381.3333333333333], [401.0, 307.2857142857143], [415.0, 705.6666666666666], [413.0, 205.5], [414.0, 517.0], [403.0, 26.5], [402.0, 23.0], [412.0, 24.666666666666668], [410.0, 160.60000000000002], [411.0, 356.0], [407.0, 58.77777777777777], [400.0, 19.166666666666664], [408.0, 30.333333333333336], [409.0, 612.6], [406.0, 166.14285714285714], [405.0, 168.57142857142856], [404.0, 224.33333333333334], [419.0, 132.2], [431.0, 91.16666666666666], [430.0, 38.16666666666667], [428.0, 94.05882352941177], [429.0, 121.72727272727273], [424.0, 130.36363636363637], [427.0, 141.66666666666669], [426.0, 115.0], [425.0, 226.4], [422.0, 556.5], [420.0, 167.57142857142856], [421.0, 84.11764705882352], [416.0, 49.666666666666664], [418.0, 268.0], [417.0, 505.0], [423.0, 229.0], [435.0, 296.90909090909093], [446.0, 370.5], [447.0, 174.625], [441.0, 164.85714285714286], [440.0, 1003.0], [445.0, 50.111111111111114], [444.0, 519.5], [443.0, 363.77777777777777], [442.0, 35.5], [439.0, 40.77777777777777], [438.0, 296.0], [437.0, 206.5], [436.0, 116.5], [434.0, 119.45454545454545], [433.0, 34.421052631578945], [432.0, 127.9090909090909], [451.0, 232.8], [462.0, 547.25], [461.0, 75.5], [459.0, 437.2], [458.0, 90.0], [457.0, 304.0], [463.0, 679.0], [456.0, 516.5], [455.0, 350.30769230769226], [454.0, 79.0], [453.0, 34.83333333333333], [449.0, 402.3333333333333], [448.0, 1001.0], [450.0, 172.0], [477.0, 73.125], [475.0, 185.14285714285717], [474.0, 168.125], [472.0, 212.0], [479.0, 519.5], [478.0, 679.0], [473.0, 234.8], [471.0, 396.6666666666667], [470.0, 679.6666666666666], [469.0, 308.5], [468.0, 58.333333333333336], [467.0, 213.66666666666669], [476.0, 1001.0], [466.0, 362.3333333333333], [465.0, 522.0], [464.0, 26.0], [493.0, 37.26666666666666], [495.0, 102.66666666666666], [494.0, 71.04545454545455], [492.0, 136.4], [483.0, 316.7142857142857], [482.0, 43.5], [489.0, 37.54545454545455], [488.0, 249.0], [491.0, 204.63636363636365], [490.0, 174.85714285714286], [486.0, 31.52631578947368], [484.0, 184.28571428571428], [485.0, 248.6], [481.0, 295.0], [480.0, 216.0], [487.0, 134.33333333333331], [509.0, 33.45454545454546], [508.0, 33.5], [499.0, 137.44444444444446], [498.0, 226.8], [507.0, 242.55555555555554], [506.0, 30.39999999999999], [505.0, 87.0], [510.0, 319.9], [504.0, 313.2857142857143], [511.0, 89.93333333333334], [503.0, 28.714285714285715], [502.0, 327.2857142857143], [501.0, 38.22222222222222], [500.0, 197.66666666666666], [497.0, 32.84615384615384], [496.0, 99.49999999999999], [517.0, 58.625], [542.0, 331.0], [543.0, 629.4], [539.0, 57.0], [541.0, 56.0], [540.0, 66.33333333333333], [538.0, 380.6666666666667], [536.0, 226.66666666666666], [537.0, 536.5], [518.0, 430.6], [519.0, 525.5], [515.0, 127.71428571428571], [514.0, 61.33333333333333], [516.0, 411.625], [513.0, 52.9047619047619], [512.0, 187.71428571428572], [534.0, 125.28571428571428], [533.0, 214.0], [532.0, 27.333333333333332], [535.0, 244.6], [531.0, 247.4], [530.0, 299.25], [529.0, 192.0], [528.0, 163.625], [527.0, 157.44444444444446], [526.0, 364.3333333333333], [525.0, 58.85714285714287], [521.0, 62.12499999999999], [523.0, 53.45454545454546], [524.0, 172.25], [522.0, 440.2], [520.0, 305.75], [571.0, 684.3333333333334], [574.0, 65.66666666666667], [573.0, 308.0], [572.0, 1001.0], [575.0, 691.3333333333334], [569.0, 237.2], [570.0, 69.0], [568.0, 54.0], [551.0, 1002.0], [550.0, 63.75], [548.0, 382.3333333333333], [547.0, 116.22222222222221], [546.0, 72.0], [545.0, 444.0], [544.0, 70.5], [567.0, 108.23529411764704], [566.0, 245.6], [565.0, 374.5], [564.0, 40.0], [562.0, 403.125], [561.0, 41.666666666666664], [563.0, 239.2], [560.0, 53.83333333333333], [559.0, 298.75], [558.0, 303.25], [557.0, 417.5], [556.0, 58.833333333333336], [555.0, 71.0], [554.0, 162.4], [553.0, 377.6666666666667], [552.0, 515.0], [582.0, 118.23076923076923], [583.0, 150.77777777777777], [601.0, 375.6666666666667], [604.0, 35.89999999999999], [603.0, 1001.0], [605.0, 351.55555555555554], [602.0, 67.5], [607.0, 237.2], [606.0, 97.26666666666667], [600.0, 333.85714285714283], [581.0, 336.42857142857144], [580.0, 374.0], [579.0, 529.0], [578.0, 62.333333333333336], [577.0, 540.5], [576.0, 300.75], [591.0, 83.33333333333333], [590.0, 1002.0], [589.0, 631.6], [588.0, 81.00000000000001], [587.0, 1001.0], [585.0, 534.5], [584.0, 225.8], [592.0, 275.375], [597.0, 217.9090909090909], [599.0, 58.0], [598.0, 162.77777777777777], [596.0, 36.25], [595.0, 351.3333333333333], [593.0, 45.125], [594.0, 420.2], [614.0, 249.8], [616.0, 164.55555555555554], [617.0, 66.0], [615.0, 137.25], [632.0, 278.5], [634.0, 243.2], [635.0, 210.16666666666666], [633.0, 302.25], [637.0, 207.5], [638.0, 38.666666666666664], [639.0, 515.6666666666667], [636.0, 58.16666666666667], [613.0, 229.4], [611.0, 223.6], [612.0, 272.0], [610.0, 533.25], [608.0, 135.1], [609.0, 28.2], [619.0, 146.5], [618.0, 150.8], [622.0, 219.0], [621.0, 457.0], [620.0, 56.0], [623.0, 45.0], [625.0, 175.44444444444446], [624.0, 196.77777777777777], [627.0, 45.54545454545455], [628.0, 351.16666666666663], [629.0, 48.21428571428572], [630.0, 184.3846153846154], [631.0, 118.92857142857144], [626.0, 127.66666666666666], [668.0, 69.75], [655.0, 54.72727272727273], [640.0, 534.0], [641.0, 294.5], [643.0, 396.2], [642.0, 494.0], [645.0, 244.6], [644.0, 420.3333333333333], [664.0, 120.9375], [647.0, 184.66666666666666], [665.0, 136.5], [646.0, 104.76923076923077], [667.0, 187.44444444444446], [666.0, 257.4], [669.0, 264.4615384615385], [671.0, 178.875], [670.0, 127.66666666666669], [652.0, 63.68421052631579], [651.0, 431.8], [650.0, 62.75], [648.0, 218.66666666666669], [649.0, 366.0], [653.0, 439.4], [654.0, 66.45454545454545], [656.0, 228.8181818181818], [661.0, 58.333333333333336], [663.0, 48.0], [662.0, 260.1428571428571], [660.0, 57.30000000000001], [659.0, 168.22222222222223], [658.0, 154.0], [657.0, 263.55555555555554], [698.0, 378.5], [673.0, 224.33333333333334], [674.0, 64.66666666666667], [675.0, 60.5], [678.0, 374.6666666666667], [679.0, 1002.0], [677.0, 219.0], [676.0, 374.77777777777777], [672.0, 196.71428571428572], [687.0, 533.5], [686.0, 64.33333333333333], [685.0, 220.33333333333334], [684.0, 221.5], [683.0, 253.8], [682.0, 533.5], [680.0, 375.0], [681.0, 1001.0], [699.0, 223.83333333333331], [700.0, 69.14285714285714], [689.0, 67.75], [688.0, 221.83333333333331], [703.0, 1001.0], [702.0, 1001.5], [701.0, 1002.0], [691.0, 169.22222222222223], [692.0, 378.3333333333333], [690.0, 331.8571428571429], [697.0, 65.83333333333334], [696.0, 222.5], [694.0, 301.75], [695.0, 219.75], [693.0, 62.85714285714286], [729.0, 100.04761904761905], [735.0, 58.142857142857146], [723.0, 395.25], [722.0, 416.5], [721.0, 75.0], [720.0, 540.0], [724.0, 287.8333333333333], [725.0, 173.22222222222223], [726.0, 150.75000000000003], [727.0, 50.34782608695652], [734.0, 149.9], [733.0, 135.36363636363637], [732.0, 131.15384615384616], [730.0, 51.0625], [731.0, 285.5], [728.0, 197.76923076923077], [711.0, 1002.0], [710.0, 207.28571428571428], [708.0, 538.5], [707.0, 1001.0], [705.0, 1002.0], [709.0, 1001.0], [704.0, 534.5], [719.0, 1001.3333333333334], [718.0, 76.0], [717.0, 79.25], [716.0, 1001.0], [715.0, 1001.0], [714.0, 383.3333333333333], [713.0, 538.5], [760.0, 62.09523809523808], [736.0, 240.6], [737.0, 361.0], [738.0, 213.33333333333331], [739.0, 48.42857142857143], [741.0, 51.4], [740.0, 296.875], [743.0, 531.3333333333333], [742.0, 62.166666666666664], [746.0, 164.33333333333331], [744.0, 376.6666666666667], [745.0, 167.0], [748.0, 56.57142857142858], [749.0, 369.0], [747.0, 152.72727272727275], [751.0, 142.33333333333331], [750.0, 192.28571428571428], [762.0, 205.47058823529412], [761.0, 163.8695652173913], [767.0, 303.22222222222223], [752.0, 61.25], [757.0, 147.42857142857144], [755.0, 144.29999999999998], [754.0, 169.0], [753.0, 287.625], [756.0, 124.69230769230768], [759.0, 155.33333333333334], [758.0, 165.8235294117647], [766.0, 150.99999999999997], [765.0, 89.08695652173914], [764.0, 205.13333333333333], [763.0, 155.05555555555554], [775.0, 144.0], [795.0, 95.5], [768.0, 98.71428571428572], [783.0, 227.33333333333334], [782.0, 365.125], [781.0, 340.42857142857144], [780.0, 176.0], [779.0, 182.0], [778.0, 364.0], [777.0, 239.125], [776.0, 219.15384615384616], [769.0, 355.5], [799.0, 189.0], [787.0, 142.22222222222223], [786.0, 691.6666666666666], [785.0, 72.0], [784.0, 148.33333333333331], [791.0, 533.5], [790.0, 1002.0], [789.0, 1002.0], [788.0, 486.3333333333333], [798.0, 218.92857142857144], [797.0, 181.6], [796.0, 401.0], [794.0, 129.0], [793.0, 104.83333333333333], [792.0, 356.0], [774.0, 498.125], [773.0, 160.57142857142858], [772.0, 153.11111111111111], [771.0, 360.2857142857143], [770.0, 90.25], [807.0, 644.0], [814.0, 208.33333333333334], [811.0, 119.5], [812.0, 824.0], [813.0, 448.6666666666667], [810.0, 63.5], [808.0, 300.0], [809.0, 1001.0], [827.0, 454.3333333333333], [826.0, 1001.0], [828.0, 1001.0], [831.0, 1001.0], [829.0, 1001.0], [817.0, 638.5], [816.0, 525.3333333333334], [820.0, 329.5], [819.0, 1002.0], [821.0, 1002.0], [818.0, 67.2], [825.0, 383.5], [824.0, 292.0], [806.0, 448.3333333333333], [805.0, 379.3333333333333], [804.0, 175.5], [803.0, 350.0], [802.0, 178.5], [801.0, 256.0], [800.0, 259.6], [815.0, 1002.0], [823.0, 297.8571428571429], [822.0, 300.75], [860.0, 128.88888888888889], [863.0, 107.2], [850.0, 1002.0], [853.0, 1003.0], [852.0, 1003.0], [862.0, 325.6666666666667], [861.0, 257.3333333333333], [859.0, 331.75], [858.0, 333.0], [857.0, 1002.0], [856.0, 1002.0], [847.0, 1000.8], [832.0, 1001.0], [835.0, 1001.0], [833.0, 1001.0], [837.0, 1001.0], [836.0, 1002.0], [844.0, 1001.0], [841.0, 1002.0], [840.0, 1001.0], [855.0, 1002.0], [854.0, 1003.0], [889.0, 329.5], [894.0, 577.5], [895.0, 413.53846153846155], [880.0, 1072.0], [893.0, 364.75], [892.0, 464.8], [891.0, 106.0], [890.0, 244.46153846153845], [877.0, 752.0], [879.0, 260.33333333333337], [878.0, 557.5], [865.0, 239.0], [866.0, 466.4], [864.0, 330.75], [868.0, 313.90909090909093], [867.0, 808.3333333333334], [871.0, 463.55555555555554], [888.0, 106.5], [870.0, 281.5], [869.0, 248.18181818181816], [876.0, 873.2], [873.0, 512.2], [875.0, 165.33333333333334], [874.0, 373.25], [872.0, 294.0], [887.0, 886.75], [886.0, 669.4285714285714], [885.0, 591.25], [883.0, 467.2], [884.0, 1002.0], [881.0, 317.6], [923.0, 264.72], [913.0, 459.68181818181824], [919.0, 230.125], [918.0, 817.75], [917.0, 436.0], [920.0, 98.125], [903.0, 418.07692307692304], [902.0, 804.0344827586207], [901.0, 381.13333333333327], [900.0, 296.20000000000005], [899.0, 312.46666666666664], [898.0, 443.90909090909093], [897.0, 108.89999999999999], [896.0, 311.2], [911.0, 155.52941176470586], [910.0, 275.90909090909093], [909.0, 216.94117647058823], [908.0, 345.6666666666667], [907.0, 181.69230769230768], [905.0, 171.3846153846154], [904.0, 234.85714285714286], [906.0, 198.23809523809524], [916.0, 183.83333333333334], [915.0, 215.35294117647058], [914.0, 244.85], [925.0, 100.4], [912.0, 326.625], [927.0, 278.4], [926.0, 358.0909090909092], [924.0, 191.90909090909088], [922.0, 309.8888888888889], [921.0, 549.0], [928.0, 227.71428571428572], [938.0, 101.0], [937.0, 102.0], [935.0, 100.58333333333333], [957.0, 1002.0], [956.0, 1002.0000000000001], [959.0, 1001.0], [944.0, 1002.0], [947.0, 1001.0], [946.0, 1001.0], [958.0, 1002.0], [934.0, 97.71428571428571], [931.0, 213.125], [930.0, 222.06666666666666], [929.0, 103.0], [933.0, 210.0], [932.0, 200.66666666666669], [940.0, 821.2], [943.0, 1002.0], [941.0, 1002.0], [939.0, 102.0], [936.0, 552.5], [985.0, 95.0], [990.0, 822.8], [989.0, 101.5], [991.0, 97.0], [976.0, 165.83333333333334], [977.0, 88.0], [978.0, 396.3333333333333], [988.0, 698.0], [987.0, 399.3333333333333], [975.0, 325.75], [974.0, 698.0], [960.0, 108.0], [962.0, 549.5], [963.0, 549.5], [965.0, 778.0], [964.0, 99.0], [967.0, 550.0], [966.0, 325.0], [972.0, 95.5], [971.0, 248.66666666666666], [969.0, 276.8], [970.0, 244.83333333333331], [968.0, 321.75], [973.0, 220.14285714285714], [983.0, 545.5], [982.0, 217.85714285714283], [980.0, 89.4], [981.0, 698.3333333333334], [979.0, 399.0], [995.0, 101.33333333333334], [1001.0, 503.1111111111111], [1004.0, 1002.0], [1002.0, 1001.0], [998.0, 104.66666666666667], [997.0, 441.25], [994.0, 105.0], [993.0, 95.0], [1007.0, 695.6666666666666], [992.0, 1001.0], [1005.0, 1001.0], [1023.0, 1002.0], [1010.0, 1001.0], [1009.0, 1001.0], [1018.0, 1002.125], [999.0, 1002.0], [1080.0, 1002.0], [1064.0, 1001.0], [1084.0, 1002.0], [1086.0, 202.0], [1062.0, 1001.0], [1058.0, 1002.0], [1082.0, 1002.0], [1076.0, 1002.0], [1038.0, 1001.0], [1036.0, 1001.5], [1034.0, 1002.0], [1032.0, 1002.0], [1030.0, 1002.0], [1026.0, 1002.0], [1054.0, 1001.5], [1052.0, 1001.0], [1048.0, 1001.0], [1046.0, 1001.0], [1042.0, 1002.0], [1040.0, 1002.0], [1070.0, 1001.0], [1068.0, 1002.0], [1066.0, 1002.0], [1140.0, 51.857142857142854], [1126.0, 108.0], [1144.0, 20.0], [1150.0, 68.33333333333333], [1148.0, 3.75], [1146.0, 4.666666666666667], [1124.0, 109.0], [1122.0, 63.4], [1142.0, 36.5], [1136.0, 28.428571428571427], [1102.0, 1001.3333333333334], [1096.0, 1002.0], [1092.0, 1001.0], [1090.0, 1002.0], [1088.0, 1002.0], [1138.0, 22.75], [1118.0, 31.25], [1116.0, 85.33333333333333], [1114.0, 20.666666666666668], [1112.0, 505.5], [1110.0, 346.0], [1106.0, 344.3333333333333], [1104.0, 1002.0], [1108.0, 1001.0], [1134.0, 29.85714285714286], [1132.0, 37.375], [1128.0, 41.33333333333333], [1130.0, 18.5], [1204.0, 10.241379310344827], [1212.0, 35.90625000000001], [1214.0, 33.255813953488364], [1184.0, 9.285714285714285], [1190.0, 16.159999999999997], [1188.0, 16.076923076923077], [1186.0, 29.51851851851852], [1210.0, 31.823529411764707], [1208.0, 9.142857142857142], [1206.0, 22.72222222222222], [1200.0, 8.818181818181818], [1202.0, 114.5], [1180.0, 33.900000000000006], [1182.0, 8.142857142857142], [1152.0, 4.0], [1154.0, 28.0], [1160.0, 8.058823529411764], [1158.0, 9.249999999999998], [1156.0, 10.666666666666666], [1164.0, 21.0], [1162.0, 21.000000000000004], [1166.0, 18.416666666666668], [1178.0, 5.666666666666667], [1176.0, 31.545454545454547], [1174.0, 34.8], [1172.0, 40.714285714285715], [1170.0, 44.27777777777777], [1168.0, 28.818181818181813], [1194.0, 51.81818181818183], [1198.0, 11.333333333333334], [1196.0, 33.22222222222222], [1192.0, 31.818181818181817], [1228.0, 10.615384615384613], [1218.0, 76.51612903225808], [1262.0, 64.0], [1216.0, 29.837837837837842], [1246.0, 6.6], [1222.0, 53.478260869565226], [1220.0, 10.033333333333333], [1224.0, 24.59375], [1230.0, 9.730769230769232], [1264.0, 33.333333333333336], [1266.0, 42.5], [1268.0, 41.5], [1272.0, 107.0], [1270.0, 38.5], [1274.0, 71.6], [1278.0, 38.142857142857146], [1276.0, 56.22222222222222], [1226.0, 23.65714285714286], [1244.0, 94.66666666666666], [1242.0, 75.25], [1240.0, 10.4], [1238.0, 9.714285714285714], [1234.0, 9.636363636363637], [1236.0, 7.666666666666667], [1232.0, 10.428571428571429], [1248.0, 39.70000000000001], [1250.0, 79.54545454545453], [1252.0, 72.16666666666667], [1254.0, 71.78571428571429], [1260.0, 66.42857142857143], [1258.0, 52.857142857142854], [1256.0, 55.625], [1286.0, 77.8], [1300.0, 23.2], [1302.0, 44.0], [1308.0, 25.666666666666668], [1306.0, 33.0], [1304.0, 89.0], [1310.0, 24.4], [1280.0, 157.5], [1298.0, 106.74999999999999], [1296.0, 58.75000000000001], [1294.0, 86.55555555555556], [1328.0, 167.2], [1332.0, 89.39999999999999], [1330.0, 146.72727272727272], [1312.0, 38.5], [1342.0, 106.47058823529413], [1340.0, 159.16666666666666], [1338.0, 137.125], [1336.0, 202.16666666666669], [1334.0, 117.42857142857143], [1314.0, 40.8], [1318.0, 42.916666666666664], [1326.0, 210.45454545454547], [1322.0, 159.0], [1320.0, 14.0], [1324.0, 20.0], [1316.0, 58.6], [1292.0, 58.50000000000001], [1288.0, 35.16666666666667], [1290.0, 27.5], [1284.0, 61.0], [1282.0, 33.714285714285715], [1350.0, 140.7857142857143], [1346.0, 174.3076923076923], [1344.0, 84.71428571428571], [1374.0, 80.5], [1372.0, 85.66666666666667], [1370.0, 69.0], [1368.0, 95.0], [1366.0, 79.5], [1364.0, 90.0], [1362.0, 75.0], [1360.0, 94.0], [1352.0, 199.0], [1348.0, 204.92307692307693], [1354.0, 118.75], [1358.0, 67.0], [1356.0, 92.0], [1396.0, 73.5], [1392.0, 75.0], [1400.0, 88.5], [1398.0, 83.8], [1404.0, 83.5], [1406.0, 80.6], [1378.0, 78.0], [1382.0, 54.0], [1384.0, 81.0], [1386.0, 74.0], [1390.0, 68.0], [1388.0, 93.0], [1458.0, 72.0], [1436.0, 62.0], [1410.0, 69.0], [1438.0, 94.0], [1408.0, 97.0], [1456.0, 68.0], [1422.0, 98.5], [1420.0, 89.0], [1416.0, 77.0], [1414.0, 91.0], [1412.0, 98.0], [1460.0, 69.22222222222223], [1468.0, 96.5], [1442.0, 98.5], [1440.0, 79.0], [1462.0, 67.0], [1424.0, 59.0], [1426.0, 60.333333333333336], [1434.0, 71.16666666666666], [1432.0, 75.5], [1430.0, 83.8], [1428.0, 96.0], [1444.0, 77.5], [1448.0, 82.0], [1446.0, 77.33333333333333], [1450.0, 78.66666666666667], [1454.0, 69.5], [1452.0, 94.0], [1474.0, 92.5], [1472.0, 92.0], [1079.0, 1002.0], [1061.0, 1001.0], [1085.0, 1002.0], [1087.0, 1002.0], [1059.0, 1002.0], [1081.0, 1002.0], [1075.0, 1001.75], [1037.0, 1001.0], [1033.0, 1002.0], [1031.0, 1002.0], [1029.0, 1002.0], [1025.0, 1002.0], [1051.0, 202.0], [1049.0, 1001.0], [1045.0, 1001.0], [1043.0, 1002.0], [1041.0, 1001.0], [1071.0, 1002.0], [1065.0, 1002.0], [1063.0, 1002.0], [1139.0, 24.142857142857142], [1149.0, 46.36363636363636], [1151.0, 23.25], [1121.0, 202.0], [1123.0, 134.0], [1125.0, 202.0], [1129.0, 34.5], [1127.0, 88.8], [1145.0, 39.714285714285715], [1147.0, 4.333333333333333], [1143.0, 25.909090909090907], [1141.0, 22.571428571428573], [1137.0, 33.8], [1099.0, 1001.0], [1097.0, 1001.0], [1095.0, 1002.0], [1093.0, 1001.0], [1091.0, 602.0], [1119.0, 61.333333333333336], [1117.0, 129.5], [1113.0, 23.5], [1111.0, 1001.0], [1109.0, 1001.0], [1107.0, 1001.0], [1105.0, 1002.0], [1115.0, 202.0], [1133.0, 29.14285714285714], [1135.0, 11.0], [1131.0, 22.571428571428573], [1201.0, 69.86666666666666], [1211.0, 20.65], [1213.0, 75.83870967741936], [1209.0, 9.56521739130435], [1215.0, 66.3170731707317], [1207.0, 41.45454545454545], [1203.0, 14.21052631578947], [1205.0, 65.00000000000001], [1183.0, 13.5], [1153.0, 7.666666666666667], [1159.0, 24.8], [1157.0, 7.0], [1155.0, 50.0], [1163.0, 39.38461538461539], [1165.0, 29.083333333333336], [1167.0, 6.666666666666667], [1161.0, 14.076923076923077], [1181.0, 8.777777777777779], [1179.0, 19.714285714285715], [1177.0, 14.466666666666669], [1175.0, 14.0], [1173.0, 6.0], [1171.0, 27.0], [1169.0, 62.157894736842096], [1199.0, 43.625], [1197.0, 25.76666666666667], [1195.0, 9.125], [1193.0, 27.833333333333332], [1191.0, 39.24999999999999], [1185.0, 58.99999999999999], [1187.0, 18.5], [1189.0, 29.5], [1265.0, 61.666666666666664], [1255.0, 66.1], [1259.0, 61.6], [1261.0, 30.714285714285715], [1263.0, 143.2], [1247.0, 46.57142857142858], [1217.0, 56.99999999999998], [1219.0, 44.297297297297305], [1221.0, 48.8125], [1229.0, 9.303030303030303], [1223.0, 42.56521739130435], [1227.0, 15.75], [1225.0, 8.772727272727273], [1231.0, 8.333333333333334], [1245.0, 18.30769230769231], [1241.0, 30.666666666666668], [1243.0, 9.249999999999998], [1239.0, 25.0], [1237.0, 11.428571428571429], [1235.0, 8.2], [1233.0, 9.5], [1249.0, 72.0], [1279.0, 19.5], [1275.0, 51.99999999999999], [1271.0, 51.71428571428571], [1267.0, 15.0], [1273.0, 14.0], [1277.0, 23.727272727272727], [1251.0, 86.2], [1253.0, 83.55555555555557], [1257.0, 69.33333333333333], [1293.0, 23.666666666666668], [1285.0, 56.142857142857146], [1281.0, 48.27272727272727], [1299.0, 82.44444444444444], [1297.0, 35.54166666666667], [1295.0, 71.60000000000001], [1331.0, 129.125], [1329.0, 159.33333333333334], [1313.0, 92.25], [1343.0, 39.0], [1335.0, 185.25], [1339.0, 118.59999999999998], [1337.0, 97.3], [1341.0, 156.0], [1333.0, 114.08333333333333], [1315.0, 63.87499999999999], [1317.0, 30.125000000000004], [1321.0, 100.6], [1319.0, 18.0], [1325.0, 230.80000000000004], [1327.0, 83.14285714285714], [1323.0, 160.83333333333334], [1291.0, 28.0], [1289.0, 25.333333333333332], [1287.0, 21.25], [1283.0, 29.0], [1305.0, 33.5], [1307.0, 58.5], [1311.0, 37.77777777777778], [1309.0, 44.75], [1303.0, 47.0], [1301.0, 31.54545454545455], [1399.0, 96.0], [1351.0, 103.0], [1345.0, 95.76190476190476], [1375.0, 94.0], [1371.0, 82.0], [1369.0, 70.0], [1365.0, 78.0], [1363.0, 90.0], [1361.0, 94.5], [1347.0, 276.8333333333333], [1349.0, 141.38888888888889], [1353.0, 140.55555555555554], [1355.0, 47.0], [1379.0, 73.5], [1377.0, 83.0], [1381.0, 94.0], [1405.0, 58.25], [1403.0, 77.0], [1401.0, 95.0], [1397.0, 89.0], [1395.0, 90.0], [1359.0, 96.0], [1357.0, 96.0], [1407.0, 58.0], [1385.0, 71.0], [1389.0, 61.75], [1391.0, 81.0], [1383.0, 73.0], [1457.0, 69.99999999999999], [1435.0, 67.0], [1421.0, 80.5], [1425.0, 68.75], [1423.0, 79.5], [1461.0, 68.55555555555556], [1469.0, 70.0], [1467.0, 97.0], [1465.0, 99.0], [1471.0, 86.0], [1459.0, 69.0], [1427.0, 71.28571428571429], [1429.0, 81.5], [1437.0, 77.5], [1439.0, 99.0], [1419.0, 85.5], [1417.0, 75.0], [1415.0, 75.0], [1411.0, 82.0], [1409.0, 95.0], [1433.0, 65.6], [1431.0, 98.0], [1445.0, 75.4], [1449.0, 65.0], [1451.0, 100.0], [1455.0, 68.83333333333333], [1453.0, 82.5], [1475.0, 99.00000000000001], [1473.0, 91.0], [1.0, 3001.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[726.9780999999984, 187.9674999999998]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1475.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 22500.0, "minX": 1.76070762E12, "maxY": 30166.666666666668, "series": [{"data": [[1.76070762E12, 30166.666666666668]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.76070762E12, 22500.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.76070762E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 187.9674999999998, "minX": 1.76070762E12, "maxY": 187.9674999999998, "series": [{"data": [[1.76070762E12, 187.9674999999998]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.76070762E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 187.7316999999998, "minX": 1.76070762E12, "maxY": 187.7316999999998, "series": [{"data": [[1.76070762E12, 187.7316999999998]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.76070762E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 2.1888999999999905, "minX": 1.76070762E12, "maxY": 2.1888999999999905, "series": [{"data": [[1.76070762E12, 2.1888999999999905]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.76070762E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.76070762E12, "maxY": 3042.0, "series": [{"data": [[1.76070762E12, 3042.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.76070762E12, 1.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.76070762E12, 1001.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.76070762E12, 3001.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.76070762E12, 37.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.76070762E12, 1002.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.76070762E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 17.0, "minX": 112.0, "maxY": 3002.0, "series": [{"data": [[4879.0, 59.0], [112.0, 3002.0], [939.0, 1002.0], [4070.0, 17.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4879.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 17.0, "minX": 112.0, "maxY": 3002.0, "series": [{"data": [[4879.0, 59.0], [112.0, 3002.0], [939.0, 1002.0], [4070.0, 17.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4879.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.76070762E12, "maxY": 166.66666666666666, "series": [{"data": [[1.76070762E12, 166.66666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.76070762E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.76070762E12, "maxY": 166.66666666666666, "series": [{"data": [[1.76070762E12, 166.66666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.76070762E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.76070762E12, "maxY": 166.66666666666666, "series": [{"data": [[1.76070762E12, 166.66666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.76070762E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.76070762E12, "maxY": 166.66666666666666, "series": [{"data": [[1.76070762E12, 166.66666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.76070762E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

